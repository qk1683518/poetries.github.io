<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2017-09-17T12:12:07.735Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高阶函数map reduce filter</title>
    <link href="http://blog.poetries.top/2017/09/17/map-reduce-filter/"/>
    <id>http://blog.poetries.top/2017/09/17/map-reduce-filter/</id>
    <published>2017-09-17T09:33:00.000Z</published>
    <updated>2017-09-17T12:12:07.735Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理于互联网</p></blockquote><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><hr><ul><li>由于<code>map()</code>方法定义在<code>JavaScript</code>的<code>Array</code>中，我们调用<code>Array</code>的<code>map()</code>方法，传入我们自己的函数，就得到了一个新的<code>Array</code>作为结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</div><div class="line">arr.map(pow); <span class="comment">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></div></pre></td></tr></table></figure><ul><li><code>map()</code>传入的参数是<code>pow</code>，即函数对象本身</li><li><code>map()</code>作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的<code>f(x)=x2</code>，还可以计算任意复杂的函数，比如，把<code>Array</code>的所有数字转为字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</div><div class="line">arr.map(<span class="built_in">String</span>); <span class="comment">// ['1', '2', '3', '4', '5', '6', '7', '8', '9']</span></div></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><hr><blockquote><p>再看<code>reduce</code>的用法。<code>Array</code>的<code>reduce()</code>把一个函数作用在这个<code>Array</code>的<code>[x1, x2, x3...]</code>上，这个函数必须接收两个参数，<code>reduce()</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</div></pre></td></tr></table></figure><ul><li>比方说对一个<code>Array</code>求和，就可以用<code>reduce</code>实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;); <span class="comment">// 25</span></div></pre></td></tr></table></figure><ul><li>要把<code>[1, 3, 5, 7, 9]</code>变换成整数<code>13579</code>，<code>reduce()</code>也能派上用场</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y;</div><div class="line">&#125;); <span class="comment">// 13579</span></div></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><hr><ul><li><code>filter</code>也是一个常用的操作，它用于把<code>Array</code>的某些元素过滤掉，然后返回剩下的元素</li></ul><blockquote><p>和<code>map()</code>类似，<code>Array</code>的<code>filter()</code>也接收一个函数。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>true</code>还是<code>false</code>决定保留还是丢弃该元素</p></blockquote><ul><li>例如，在一个<code>Array</code>中，删掉偶数，只保留奇数，可以这么写：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>];</div><div class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x % <span class="number">2</span> !== <span class="number">0</span>;</div><div class="line">&#125;);</div><div class="line">r; <span class="comment">// [1, 5, 9, 15]</span></div></pre></td></tr></table></figure><ul><li>把一个<code>Array</code>中的空字符串删掉，可以这么写：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="string">'C'</span>, <span class="string">'  '</span>];</div><div class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> s &amp;&amp; s.trim(); <span class="comment">// 注意：IE9以下的版本没有trim()方法</span></div><div class="line">&#125;);</div><div class="line">r; <span class="comment">// ['A', 'B', 'C']</span></div></pre></td></tr></table></figure><ul><li>可见用<code>filter()</code>这个高阶函数，关键在于正确实现一个“筛选”函数</li></ul><p><strong>回调函数</strong></p><blockquote><p><code>filter()</code>接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示<code>Array</code>的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, self</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(element); <span class="comment">// 依次打印'A', 'B', 'C'</span></div><div class="line">    <span class="built_in">console</span>.log(index); <span class="comment">// 依次打印0, 1, 2</span></div><div class="line">    <span class="built_in">console</span>.log(self); <span class="comment">// self就是变量arr</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>利用<code>filter</code>，可以巧妙地去除<code>Array</code>的重复元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> r;</div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'orange'</span>, <span class="string">'strawberry'</span>];</div><div class="line">r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, self</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> self.indexOf(element) === index;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li><p>去除重复元素依靠的是<code>indexOf</code>总是返回第一个元素的位置，后续的重复元素位置与<code>indexOf</code>返回的位置不相等，因此被<code>filter</code>滤掉了</p></li><li><p>用<code>filter()</code>筛选出素数</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">arr.filter(<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">element,index,self</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">2</span>;i&lt;element;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(element%i === <span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(element === i)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><hr><blockquote><p>排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。如果是数字，我们可以直接比较，但如果是字符串或者两个对象呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。通常规定，对于两个元素x和y，如果认为x &lt; y，则返回-1，如果认为x == y，则返回0，如果认为x &gt; y，则返回1，这样，排序算法就不用关心具体的比较过程，而是根据比较结果直接排序</p></blockquote><ul><li><code>JavaScript</code>的<code>Array</code>的<code>sort()</code>方法就是用于排序的，但是排序结果可能让你大吃一惊：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 看上去正常的结果:</span></div><div class="line">[<span class="string">'Google'</span>, <span class="string">'Apple'</span>, <span class="string">'Microsoft'</span>].sort(); <span class="comment">// ['Apple', 'Google', 'Microsoft'];</span></div><div class="line"></div><div class="line"><span class="comment">// apple排在了最后:</span></div><div class="line">[<span class="string">'Google'</span>, <span class="string">'apple'</span>, <span class="string">'Microsoft'</span>].sort(); <span class="comment">// ['Google', 'Microsoft", 'apple']</span></div><div class="line"></div><div class="line"><span class="comment">// 无法理解的结果:</span></div><div class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>].sort(); <span class="comment">// [1, 10, 2, 20]</span></div></pre></td></tr></table></figure><ul><li><code>Array</code>的<code>sort()</code>方法默认把所有元素先转换为<code>String</code>再排序，结果<code>&#39;10&#39;</code>排在了<code>&#39;2&#39;</code>的前面，因为字符<code>&#39;1&#39;</code>比字符<code>&#39;2&#39;</code>的<code>ASCII</code>码小</li><li>如果不知道<code>sort()</code>方法的默认排序规则，直接对数字排序，绝对栽进坑里！</li><li>幸运的是，<code>sort()</code>方法也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序</li><li>要按数字大小排序，我们可以这么写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; y) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x &gt; y) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;); <span class="comment">// [1, 2, 10, 20]</span></div></pre></td></tr></table></figure><ul><li>如果要倒序排序，我们可以把大的数放前面：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; y) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x &gt; y) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;); <span class="comment">// [20, 10, 2, 1]</span></div></pre></td></tr></table></figure><ul><li>默认情况下，对字符串排序，是按照<code>ASCII</code>的大小比较的，现在，我们提出排序应该忽略大小写，按照字母序排序。要实现这个算法，不必对现有代码大加改动，只要我们能定义出忽略大小写的比较算法就可以：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'Google'</span>, <span class="string">'apple'</span>, <span class="string">'Microsoft'</span>];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">s1, s2</span>) </span>&#123;</div><div class="line">    x1 = s1.toUpperCase();</div><div class="line">    x2 = s2.toUpperCase();</div><div class="line">    <span class="keyword">if</span> (x1 &lt; x2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x1 &gt; x2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;); <span class="comment">// ['apple', 'Google', 'Microsoft']</span></div></pre></td></tr></table></figure><ul><li>忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较</li></ul><p><strong>最后友情提示，<code>sort()</code>方法会直接对<code>Array</code>进行修改，它返回的结果仍是当前<code>Array</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a1 = [<span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'C'</span>];</div><div class="line"><span class="keyword">var</span> a2 = a1.sort();</div><div class="line">a1; <span class="comment">// ['A', 'B', 'C']</span></div><div class="line">a2; <span class="comment">// ['A', 'B', 'C']</span></div><div class="line">a1 === a2; <span class="comment">// true, a1和a2是同一对象</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;整理于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map&quot;&gt;&lt;/a&gt;map&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;由于&lt;code&gt;map()&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="高阶函数" scheme="http://blog.poetries.top/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Set与Map</title>
    <link href="http://blog.poetries.top/2017/09/17/set-map/"/>
    <id>http://blog.poetries.top/2017/09/17/set-map/</id>
    <published>2017-09-17T06:33:00.000Z</published>
    <updated>2017-09-17T12:12:07.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li>Map是一组键值对的结构，具有极快的查找速度</li><li>用Map实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用JavaScript写一个Map如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'Michael'</span>, <span class="number">95</span>], [<span class="string">'Bob'</span>, <span class="number">75</span>], [<span class="string">'Tracy'</span>, <span class="number">85</span>]]);</div><div class="line">m.get(<span class="string">'Michael'</span>); <span class="comment">// 95</span></div></pre></td></tr></table></figure><ul><li>初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 空Map</span></div><div class="line">m.set(<span class="string">'Adam'</span>, <span class="number">67</span>); <span class="comment">// 添加新的key-value</span></div><div class="line">m.set(<span class="string">'Bob'</span>, <span class="number">59</span>);</div><div class="line">m.has(<span class="string">'Adam'</span>); <span class="comment">// 是否存在key 'Adam': true</span></div><div class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">// 67</span></div><div class="line">m.delete(<span class="string">'Adam'</span>); <span class="comment">// 删除key 'Adam'</span></div><div class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">// undefined</span></div></pre></td></tr></table></figure><ul><li>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">m.set(<span class="string">'Adam'</span>, <span class="number">67</span>);</div><div class="line">m.set(<span class="string">'Adam'</span>, <span class="number">88</span>);</div><div class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">// 88</span></div></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key</p></blockquote><ul><li>要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 空Set</span></div><div class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 含1, 2, 3</span></div></pre></td></tr></table></figure><ul><li>重复元素在Set中自动被过滤</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">'3'</span>]);</div><div class="line">s; <span class="comment">// Set &#123;1, 2, 3, "3"&#125;</span></div></pre></td></tr></table></figure><ul><li>通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s.add(<span class="number">4</span>)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">&gt;&gt;&gt; s.add(<span class="number">4</span>)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure><ul><li>通过delete(key)方法可以删除元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line">s; <span class="comment">// Set &#123;1, 2, 3&#125;</span></div><div class="line">s.delete(<span class="number">3</span>);</div><div class="line">s; <span class="comment">// Set &#123;1, 2&#125;</span></div></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>Map和Set是ES6标准新增的数据类型，请根据浏览器的支持情况决定是否要使用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Map是一组键值对的结构，具有极快的查找速度&lt;/li&gt;
&lt;li&gt;用Map实现，只需要一个“名字”-“成绩”的对照表，直接
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://blog.poetries.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>web开发中跨域解决方案</title>
    <link href="http://blog.poetries.top/2017/09/17/cross-domain/"/>
    <id>http://blog.poetries.top/2017/09/17/cross-domain/</id>
    <published>2017-09-17T03:40:43.000Z</published>
    <updated>2017-09-17T12:12:07.719Z</updated>
    
    <content type="html"><![CDATA[<p><strong>什么是跨域？</strong></p><ul><li>概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域</li></ul><p><strong>下面是具体的跨域情况详解</strong></p><table><thead><tr><th>URL</th><th>说明</th><th>是否允许通信</th></tr></thead><tbody><tr><td><a href="http://www.a.com/a.js、http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/a.js、http://www.a.com/b.js</a></td><td>同一域名下</td><td>允许</td></tr><tr><td><a href="http://www.a.com/lab/a.js、http://www.a.com/script/b.js" target="_blank" rel="external">http://www.a.com/lab/a.js、http://www.a.com/script/b.js</a></td><td>同一域名下不同文件夹</td><td>允许</td></tr><tr><td><a href="http://www.a.com:8000/a.js、http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com:8000/a.js、http://www.a.com/b.js</a></td><td>同一域名，不同端口</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js、https://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/a.js、https://www.a.com/b.js</a></td><td>同一域名，不同协议</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js、http://70.32.92.74/b.js" target="_blank" rel="external">http://www.a.com/a.js、http://70.32.92.74/b.js</a></td><td>域名和域名对应ip</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js、http://script.a.com/b.js" target="_blank" rel="external">http://www.a.com/a.js、http://script.a.com/b.js</a></td><td>主域相同，子域不同</td><td>不允许（cookie这种情况下也不允许访问）</td></tr><tr><td><a href="http://www.a.com/a.js、http://a.com/b.js" target="_blank" rel="external">http://www.a.com/a.js、http://a.com/b.js</a></td><td>同一域名，不同二级域名（同上）</td><td>不允许（cookie这种情况下也不允许访问）</td></tr><tr><td><a href="http://www.cnblogs.com/a.js、http://www.a.com/b.js" target="_blank" rel="external">http://www.cnblogs.com/a.js、http://www.a.com/b.js</a></td><td>不同域名</td><td>不允许</td></tr></tbody></table><h2 id="一、document-domain跨域"><a href="#一、document-domain跨域" class="headerlink" title="一、document.domain跨域"></a>一、document.domain跨域</h2><hr><ul><li>原理：相同主域名不同子域名下的页面，可以设置<code>document.domain</code>让它们同域</li><li>限制：同域<code>document</code>提供的是页面间的互操作，需要载入<code>iframe</code>页面</li></ul><blockquote><p>下面几个域名下的页面都是可以通过<code>document.domain</code>跨域互操作的： <code>http://a.com/foo</code>, <code>http://b.a.com/bar</code>, <code>http://c.a.com/bar</code>。 但只能以页面嵌套的方式来进行页面互操作，比如常见的<code>iframe</code>方式就可以完成页面嵌套</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// URL http://a.com/foo</span></div><div class="line"><span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">ifr.src = <span class="string">'http://b.a.com/bar'</span>; </div><div class="line">ifr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ifrdoc = ifr.contentDocument || ifr.contentWindow.document;</div><div class="line">    ifrdoc.getElementsById(<span class="string">"foo"</span>).innerHTML);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ifr.style.display = <span class="string">'none'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(ifr);</div></pre></td></tr></table></figure><ul><li>上述代码所在的<code>URL</code>是<code>http://a.com/foo</code>，它对<code>http://b.a.com/bar</code>的<code>DOM</code>访问要求后者将 <code>document.domain</code>往上设置一级</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// URL http://b.a.com/bar</span></div><div class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span></div></pre></td></tr></table></figure><ul><li><code>document.domain</code>只能从子域设置到主域，往下设置以及往其他域名设置都是不允许的， 在<code>Chrome</code>中给出的错误是这样的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uncaught DOMException: Failed to set the <span class="string">'domain'</span> property on <span class="string">'Document'</span>: <span class="string">'baidu.com'</span> is not a suffix <span class="keyword">of</span> <span class="string">'b.a.com'</span></div></pre></td></tr></table></figure><h2 id="二、有src的标签"><a href="#二、有src的标签" class="headerlink" title="二、有src的标签"></a>二、有src的标签</h2><hr><ul><li>原理：所有具有<code>src</code>属性的<code>HTML</code>标签都是可以跨域的，包括<code>&lt;img&gt;</code>, <code>&lt;script&gt;</code></li><li>限制：需要创建一个<code>DOM</code>对象，只能用于<code>GET</code>方法</li></ul><blockquote><ul><li>在<code>document.body</code>中<code>append</code>一个具有<code>src</code>属性的<code>HTML</code>标签， <code>src</code>属性值指向的<code>URL</code>会以<code>GET</code>方法被访问，该访问是可以跨域的 </li><li>其实样式表的<code>&lt;link&gt;</code>标签也是可以跨域的，只要是有<code>src</code>或<code>href</code>的<code>HTML</code>标签都有跨域的能力</li></ul></blockquote><ul><li>不同的<code>HTML</code>标签发送<code>HTTP</code>请求的时机不同，例如<code>&lt;img&gt;</code>在更改<code>src</code>属性时就会发送请求，而<code>script</code>, <code>iframe</code>, <code>link[rel=stylesheet]</code>只有在添加到<code>DOM</code>树之后才会发送<code>HTTP</code>请求：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">img.src = <span class="string">'http://some/picture'</span>;        <span class="comment">// 发送HTTP请求</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> ifr = $(<span class="string">'&lt;iframe&gt;'</span>, &#123;<span class="attr">src</span>: <span class="string">'http://b.a.com/bar'</span>&#125;);</div><div class="line">$(<span class="string">'body'</span>).append(ifr);                  <span class="comment">// 发送HTTP请求</span></div></pre></td></tr></table></figure><h2 id="三、JSONP"><a href="#三、JSONP" class="headerlink" title="三、JSONP"></a>三、JSONP</h2><hr><ul><li>原理：<code>&lt;script&gt;</code>是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数</li><li>限制：需要创建一个<code>DOM</code>对象并且添加到<code>DOM</code>树，只能用于<code>GET</code>方法</li></ul><blockquote><p><code>JSONP</code>利用的是<code>&lt;script&gt;</code>可以跨域的特性，跨域<code>URL</code>返回的脚本不仅包含数据，还包含一个回调</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// URL: http://b.a.com/foo</span></div><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">    foo: <span class="string">'bar'</span>,</div><div class="line">    bar: <span class="string">'foo'</span></div><div class="line">&#125;;</div><div class="line">callback(data);</div></pre></td></tr></table></figure><ul><li>然后在我们在主站<code>http://a.com</code>中，可以这样来跨域获取<code>http://b.a.com</code>的数据：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// URL: http://a.com/foo</span></div><div class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="comment">// 处理跨域请求得到的数据</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> script = $(<span class="string">'&lt;script&gt;'</span>, &#123;<span class="attr">src</span>: <span class="string">'http://b.a.com/bar'</span>&#125;);</div><div class="line">$(<span class="string">'body'</span>).append(script);</div></pre></td></tr></table></figure><ul><li>其实<code>jQuery</code>已经封装了<code>JSONP</code>的使用，我们可以这样来</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.getJSON( <span class="string">"http://b.a.com/bar?callback=callback"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>)</span>&#123;</div><div class="line">    <span class="comment">// 处理跨域请求得到的数据</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><blockquote><p><code>$.getJSON</code>与<code>$.get</code>的区别是前者会把<code>responseText</code>转换为<code>JSON</code>，而且当<code>URL</code>具有<code>callback</code>参数时， <code>jQuery</code>将会把它解释为一个<code>JSONP</code>请求，创建一个<code>&lt;script&gt;</code>标签来完成该请求</p></blockquote><h2 id="四、navigation-对象"><a href="#四、navigation-对象" class="headerlink" title="四、navigation 对象"></a>四、navigation 对象</h2><hr><ul><li>原理：<code>iframe</code>之间是共享<code>navigator</code>对象的，用它来传递信息</li><li>要求：<code>IE6/7</code></li></ul><blockquote><p>有些人注意到了<code>IE6/7</code>的一个漏洞：<code>iframe</code>之间的<code>window.navigator</code>对象是共享的。 我们可以把它作为一个<code>Messenger</code>，通过它来传递信息。比如一个简单的委托：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.com</span></div><div class="line">navigation.onData()&#123;</div><div class="line">    <span class="comment">// 数据到达的处理函数</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">typeof</span> navigation.getData === <span class="string">'function'</span> </div><div class="line">    || navigation.getData()</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// b.com</span></div><div class="line">navigation.getData = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.get(<span class="string">'/path/under/b.com'</span>)</div><div class="line">        .success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            <span class="keyword">typeof</span> navigation.onData === <span class="string">'function'</span></div><div class="line">                || navigation.onData(data)</div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>与<code>document.navigator</code>类似，<code>window.name</code>也是当前窗口所有页面所共享的。也可以用它来传递信息。 同样蛋疼的办法还有传递<code>Hash</code>（有些人叫锚点），这是因为每次浏览器打开一个<code>URL</code>时，<code>URL</code>后面的<code>#xxx</code>部分会保留下来，那么新的页面可以从这里获得上一个页面的数据</p></blockquote><h2 id="五、跨域资源共享（CORS）"><a href="#五、跨域资源共享（CORS）" class="headerlink" title="五、跨域资源共享（CORS）"></a>五、跨域资源共享（CORS）</h2><hr><ul><li>原理：服务器设置<code>Access-Control-Allow-OriginHTTP</code>响应头之后，浏览器将会允许跨域请求</li><li>限制：浏览器需要支持<code>HTML5</code>，可以支持<code>POST</code>，<code>PUT</code>等方法</li></ul><blockquote><p>前面提到的跨域手段都是某种意义上的<code>Hack</code>， <code>HTML5</code>标准中提出的跨域资源共享（<code>Cross Origin Resource Share</code>，<code>CORS</code>）才是正道。 它支持其他的<code>HTTP</code>方法如<code>PUT</code>, <code>POST</code>等，可以从本质上解决跨域问题。</p></blockquote><ul><li>例如，从<code>http://a.com</code>要访问<code>http://b.com</code>的数据，通常情况下<code>Chrome</code>会因跨域请求而报错</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XMLHttpRequest cannot load http:<span class="comment">//b.com. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://a.com' is therefore not allowed access</span></div></pre></td></tr></table></figure><ul><li>错误原因是被请求资源没有设置<code>Access-Control-Allow-Origin</code>，所以我们在<code>b.com</code>的服务器中设置这个响应头字段即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: *              # 允许所有域名访问，或者</div><div class="line">Access-Control-Allow-Origin: http:<span class="comment">//a.com   # 只允许所有域名访问</span></div></pre></td></tr></table></figure><h2 id="六、window-postMessage"><a href="#六、window-postMessage" class="headerlink" title="六、window.postMessage"></a>六、window.postMessage</h2><hr><ul><li>原理：<code>HTML5</code>允许窗口之间发送消息</li><li>限制：浏览器需要支持<code>HTML5</code>，获取窗口句柄后才能相互通信</li></ul><blockquote><p>这是一个安全的跨域通信方法，<code>postMessage(message,targetOrigin)</code>也是<code>HTML5</code>引入的特性。 可以给任何一个<code>window</code>发送消息，不论是否同源。第二个参数可以是*但如果你设置了一个<code>URL</code>但不相符，那么该事件不会被分发。看一个普通的使用方式吧</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// URL: http://a.com/foo</span></div><div class="line"><span class="keyword">var</span> win = <span class="built_in">window</span>.open(<span class="string">'http://b.com/bar'</span>);</div><div class="line">win.postMessage(<span class="string">'Hello, bar!'</span>, <span class="string">'http://b.com'</span>);</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// URL: http://b.com/bar</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(event.data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="七、访问控制安全的讨论"><a href="#七、访问控制安全的讨论" class="headerlink" title="七、访问控制安全的讨论"></a>七、访问控制安全的讨论</h2><hr><ul><li>在<code>HTML5</code>之前，<code>JSONP</code>已经成为跨域的事实标准了，<code>jQuery</code>都给出了支持。 值得注意的是它只是<code>Hack</code>，并没有产生额外的安全问题。 因为<code>JSONP</code>要成功获取数据，需要跨域资源所在服务器的配合，比如资源所在服务器需要自愿地回调一个合适的函数，所以服务器仍然有能力控制资源的跨域访问</li><li>跨域的正道还是要使用<code>HTML5</code>提供的CORS头字段以及<code>window.postMessage</code>， 可以支持<code>POST</code>, <code>PUT</code>等<code>HTTP</code>方法，从机制上解决跨域问题。 值得注意的是<code>Access-Control-Allow-Origin</code>头字段是资源所在服务器设置的， 访问控制的责任仍然是在提供资源的服务器一方，这和<code>JSONP</code>是一样的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;什么是跨域？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;下面是具体的跨域情况详解&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="跨域" scheme="http://blog.poetries.top/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>JS计算字符串所占字节数</title>
    <link href="http://blog.poetries.top/2017/09/12/js-calc-str-byte/"/>
    <id>http://blog.poetries.top/2017/09/12/js-calc-str-byte/</id>
    <published>2017-09-12T11:40:43.000Z</published>
    <updated>2017-09-17T12:12:07.735Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 计算字符串所占的内存字节数，默认使用UTF-8的编码方式计算，也可制定为UTF-16</span></div><div class="line"><span class="comment"> * UTF-8 是一种可变长度的 Unicode 编码格式，使用一至四个字节为每个字符编码</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * 000000 - 00007F(128个代码)      0zzzzzzz(00-7F)                             一个字节</span></div><div class="line"><span class="comment"> * 000080 - 0007FF(1920个代码)     110yyyyy(C0-DF) 10zzzzzz(80-BF)             两个字节</span></div><div class="line"><span class="comment"> * 000800 - 00D7FF </span></div><div class="line"><span class="comment">   00E000 - 00FFFF(61440个代码)    1110xxxx(E0-EF) 10yyyyyy 10zzzzzz           三个字节</span></div><div class="line"><span class="comment"> * 010000 - 10FFFF(1048576个代码)  11110www(F0-F7) 10xxxxxx 10yyyyyy 10zzzzzz  四个字节</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * 注: Unicode在范围 D800-DFFF 中不存在任何字符</span></div><div class="line"><span class="comment"> * &#123;@link http://zh.wikipedia.org/wiki/UTF-8&#125;</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * UTF-16 大部分使用两个字节编码，编码超出 65535 的使用四个字节</span></div><div class="line"><span class="comment"> * 000000 - 00FFFF  两个字节</span></div><div class="line"><span class="comment"> * 010000 - 10FFFF  四个字节</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * &#123;@link http://zh.wikipedia.org/wiki/UTF-16&#125;</span></div><div class="line"><span class="comment"> * @param  &#123;String&#125; str </span></div><div class="line"><span class="comment"> * @param  &#123;String&#125; charset utf-8, utf-16</span></div><div class="line"><span class="comment"> * @return &#123;Number&#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line">     </div><div class="line">    <span class="keyword">var</span> sizeof = <span class="function"><span class="keyword">function</span>(<span class="params">str, charset</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> total = <span class="number">0</span>,</div><div class="line">            charCode,</div><div class="line">            i,</div><div class="line">            len;</div><div class="line">        charset = charset ? charset.toLowerCase() : <span class="string">''</span>;</div><div class="line">        <span class="keyword">if</span>(charset === <span class="string">'utf-16'</span> || charset === <span class="string">'utf16'</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>, len = str.length; i &lt; len; i++)&#123;</div><div class="line">                charCode = str.charCodeAt(i);</div><div class="line">                <span class="keyword">if</span>(charCode &lt;= <span class="number">0xffff</span>)&#123;</div><div class="line">                    total += <span class="number">2</span>;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    total += <span class="number">4</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>, len = str.length; i &lt; len; i++)&#123;</div><div class="line">                charCode = str.charCodeAt(i);</div><div class="line">                <span class="keyword">if</span>(charCode &lt;= <span class="number">0x007f</span>) &#123;</div><div class="line">                    total += <span class="number">1</span>;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(charCode &lt;= <span class="number">0x07ff</span>)&#123;</div><div class="line">                    total += <span class="number">2</span>;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(charCode &lt;= <span class="number">0xffff</span>)&#123;</div><div class="line">                    total += <span class="number">3</span>;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    total += <span class="number">4</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> total;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>iframe+表单跨域提交POST请求</title>
    <link href="http://blog.poetries.top/2017/09/04/js_post/"/>
    <id>http://blog.poetries.top/2017/09/04/js_post/</id>
    <published>2017-09-04T01:30:43.000Z</published>
    <updated>2017-09-17T12:12:07.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="虚拟表单的形式提交post请求"><a href="#虚拟表单的形式提交post请求" class="headerlink" title="虚拟表单的形式提交post请求"></a>虚拟表单的形式提交post请求</h2><ul><li>现需要把数据源解析提交到表单，创建一个隐藏的表单、隐藏的<code>iframe</code>,表单的target指向<code>iframe</code>的<code>name</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var str = &apos;hfrom_handle=206438&amp;dnid=&amp;dgroup_items__x_countz_=1&amp;dgroup_items=1&amp;dgroup_items_group=dl%2ets&amp;dgroup_items_mirror_count=1&amp;dgroup_items_flags__x_countz_=1&amp;dgroup_items_flags=4&amp;dgroup_items_keys__x_countz_=1&amp;dgroup_items_keys=1jfiegbp3oyma&amp;dgroup_items_tokens__x_countz_=1&amp;dgroup_items_tokens=123456&amp;dgroup_items_datas__x_countz_=1&amp;dgroup_items_datas=&#123;%22key%22%3a%221jfiegbp3oyma%22,%22type%22%3a%22test%2epcba%22,%22time%22%3a%2220170904004724%2e838%22,%22g%22%3a[&#123;%22n%22%3a%22mfc%22,%22p%22%3a[&#123;%22n%22%3a%22factory%22,%22v%22%3a%22%22&#125;,&#123;%22n%22%3a%22operator%22,%22v%22%3a%22xiaoming%22&#125;,&#123;%22n%22%3a%22work%2eorder%22,%22v%22%3a%221889%22&#125;,&#123;%22n%22%3a%22materal%2ecode%22,%22v%22%3a%22%22&#125;,&#123;%22n%22%3a%22materal%2edesc%22,%22v%22%3a%22%22&#125;]&#125;,&#123;%22n%22%3a%22env%22,%22p%22%3a[&#123;%22n%22%3a%22dev%2ehardware%2ecpu%2emodel%22,%22v%22%3a%22gm8136%22&#125;,&#123;%22n%22%3a%22dev%2ehardware%2emodel%22,%22v%22%3a%22f127%22&#125;,&#123;%22n%22%3a%22dev%2ehardware%2esensor%2emodel%22,%22v%22%3a%22soih42%22&#125;,&#123;%22n%22%3a%22dev%2ehardware%2ewifi%2emac%22,%22v%22%3a%2228%3af3%3a66%3a1c%3aac%3a30%22&#125;,&#123;%22n%22%3a%22dev%2ehardware%2ewifi%2emodel%22,%22v%22%3a%22rtl8188%22&#125;,&#123;%22n%22%3a%22dev%2eversion%2ecurrent%22,%22v%22%3a%22v4%2e8%2e1%2e1708141702%22&#125;,&#123;%22n%22%3a%22vtest%5fver%22,%22v%22%3a%224%2e8%2e1%2e1708031358%22&#125;,&#123;%22n%22%3a%22dev%2eversion%2ebase%22,%22v%22%3a%22v3%2e3%2e2%2e1603301301%22&#125;,&#123;%22n%22%3a%22pc%2eip%2epublic%22,%22v%22%3a%22120%2e236%2e230%2e234%22&#125;,&#123;%22n%22%3a%22pc%2eip%2eprivate%22,%22v%22%3a%22192%2e168%2e3%2e180%22&#125;]&#125;,&#123;%22n%22%3a%22appearance%22,%22p%22%3a[&#123;%22n%22%3a%22result%22,%22v%22%3a%22ok%22&#125;,&#123;%22n%22%3a%22duration%22,%22v%22%3a%221605ms%22&#125;]&#125;,&#123;%22n%22%3a%22wifi%5fsignal%22,%22p%22%3a[&#123;%22n%22%3a%22quality%22,%22v%22%3a%2284%22&#125;,&#123;%22n%22%3a%22ssid%22,%22v%22%3a%22HW11%22&#125;,&#123;%22n%22%3a%22result%22,%22v%22%3a%22ok%22&#125;]&#125;,&#123;%22n%22%3a%22activate%22,%22p%22%3a[&#123;%22n%22%3a%22result%22,%22v%22%3a%22ccm%2esecurity%5fchip%2eactived%22&#125;,&#123;%22n%22%3a%22code%22,%22v%22%3a%22%22&#125;]&#125;]&#125;&amp;dgroup_items_offsets__x_countz_=1&amp;dgroup_items_offsets=0&apos;</div></pre></td></tr></table></figure><ul><li>解码后的数据</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-06cd3b80809500c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><p>创建一个隐藏的<code>input(type=&quot;hidden&quot;)</code>,然后把解码得到的数据处理填充到<code>input</code>的<code>name</code> <code>value</code>中，最后通过表单提交到<code>iframe</code>，此过程提交不会刷新页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*iframe post cross domain*/</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">js_iframe</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> i, e, key, n, v, inp, a, form, iframe;</div><div class="line">      </div><div class="line">     <span class="comment">// 原理：创建一个隐藏的form、一个隐藏的iframe,把表单的target指向iframe的name即可</span></div><div class="line">     form = <span class="built_in">document</span>.createElement(<span class="string">"form"</span>);</div><div class="line">     iframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</div><div class="line">     iframe.style.display = <span class="string">"none"</span>;</div><div class="line">     iframe.name = <span class="string">"frame_post"</span>;</div><div class="line">     <span class="built_in">document</span>.body.appendChild(iframe);</div><div class="line"></div><div class="line">     form.action = url;</div><div class="line">     form.target = <span class="string">"frame_post"</span>;</div><div class="line">     form.method = <span class="string">"post"</span>;</div><div class="line">     form.style.display = <span class="string">"none"</span>;</div><div class="line">     <span class="keyword">for</span>(i = <span class="number">0</span>, a = (<span class="built_in">decodeURIComponent</span>(str)).split(<span class="string">"&amp;"</span>);i&lt;a.length;i++) &#123;</div><div class="line">         inp = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</div><div class="line">         e = a[i].split(<span class="string">"="</span>)</div><div class="line">         inp.type = <span class="string">"hidden"</span>;</div><div class="line">         inp.name = e[<span class="number">0</span>];</div><div class="line">         inp.value = e[<span class="number">1</span>];</div><div class="line">         form.appendChild(inp);</div><div class="line">     &#125;</div><div class="line">     <span class="built_in">document</span>.body.appendChild(form);</div><div class="line">     form.submit(); </div><div class="line"> &#125;</div></pre></td></tr></table></figure></li><li><p>提交后表单处理的结果是这样：<br><img src="http://upload-images.jianshu.io/upload_images/1480597-b684987076cf78b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;虚拟表单的形式提交post请求&quot;&gt;&lt;a href=&quot;#虚拟表单的形式提交post请求&quot; class=&quot;headerlink&quot; title=&quot;虚拟表单的形式提交post请求&quot;&gt;&lt;/a&gt;虚拟表单的形式提交post请求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;现需要把数据源解析提交到
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="跨域" scheme="http://blog.poetries.top/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈JavaScript中的异步处理</title>
    <link href="http://blog.poetries.top/2017/08/27/js_cb_promise_generator_async/"/>
    <id>http://blog.poetries.top/2017/08/27/js_cb_promise_generator_async/</id>
    <published>2017-08-27T03:40:43.000Z</published>
    <updated>2017-09-17T12:12:07.735Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理于互联网</p><ul><li>在<code>JavaScript</code>的世界中，所有代码都是单线程执行的</li><li>由于这个“缺陷”，导致<code>JavaScript</code>的所有网络操作，浏览器事件，都必须是异步执行。异步执行可以用回调函数实现</li><li>异步操作会在将来的某个时间点触发一个函数调用</li></ul></blockquote><ul><li>主流的异步处理方案主要有：回调函数<code>(CallBack)</code>、<code>Promise</code>、<code>Generator</code>函数、<code>async/await</code>。</li></ul><h2 id="一、回调函数-CallBack"><a href="#一、回调函数-CallBack" class="headerlink" title="一、回调函数(CallBack)"></a>一、回调函数(CallBack)</h2><hr><ul><li>这是异步编程最基本的方法</li><li>假设我们有一个 <code>getData</code> 方法，用于异步获取数据，第一个参数为请求的 <code>url</code> 地址，第二个参数是回调函数，如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params">url, callBack</span>) </span>&#123;</div><div class="line">    <span class="comment">// 模拟发送网络请求</span></div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// 假设 res 就是返回的数据</span></div><div class="line">        <span class="keyword">var</span> res = &#123;</div><div class="line">            url: url,</div><div class="line">            data: <span class="built_in">Math</span>.random()</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 执行回调，将数据作为参数传递</span></div><div class="line">        callBack(res)</div><div class="line">    &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>我们预先设定一个场景，假设我们要请求三次服务器，每一次的请求依赖上一次请求的结果，如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">getData(<span class="string">'/page/1?param=123'</span>, (res1) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(res1)</div><div class="line">    getData(<span class="string">`/page/2?param=<span class="subst">$&#123;res1.data&#125;</span>`</span>, (res2) =&gt; &#123;</div><div class="line">        <span class="built_in">console</span>.log(res2)</div><div class="line">        getData(<span class="string">`/page/3?param=<span class="subst">$&#123;res2.data&#125;</span>`</span>, (res3) =&gt; &#123;</div><div class="line">            <span class="built_in">console</span>.log(res3)</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li><p>通过上面的代码可以看出，第一次请求的 <code>url</code> 地址为：<code>/page/1?param=123</code>，返回结果为 <code>res1</code>。</p></li><li><p>第二个请求的 <code>url</code> 地址为：<code>/page/2?param=${res1.data}</code>，依赖第<code>一次请求的</code>res1.data<code>，返回结果为</code>res2`。</p></li><li><p>第三次请求的 <code>url</code>地址为：<code>/page/3?param=${res2.data}</code>，依赖第二次请求的 <code>res2.data</code>，返回结果为 <code>res3</code>。</p></li><li><p>由于后续请求依赖前一个请求的结果，所以我们只能把下一次请求写到上一次请求的回调函数内部，这样就形成了常说的：回调地狱。</p></li></ul><h2 id="二、发布-订阅"><a href="#二、发布-订阅" class="headerlink" title="二、发布/订阅"></a>二、发布/订阅</h2><blockquote><p>我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（<code>publish</code>）一个信号，其他任务可以向信号中心”订阅”（<code>subscribe</code>）这个信号，从而知道什么时候自己可以开始执行。这就叫做”发布/订阅模式”（publish-subscribe pattern），又称”观察者模式”（observer pattern）</p></blockquote><ul><li>这个模式有多种实现，下面采用的是Ben Alman的<a href="https://gist.github.com/661855" target="_blank" rel="external">Tiny Pub/Sub</a>，这是<code>jQuery</code>的一个插件</li><li>首先，<code>f2</code>向”信号中心”<code>jQuery</code>订阅”<code>done</code>“信号</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery.subscribe(<span class="string">"done"</span>, f2);</div></pre></td></tr></table></figure><ul><li>f1进行如下改写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">　　　　　　<span class="comment">// f1的任务代码</span></div><div class="line">　　　　　　jQuery.publish(<span class="string">"done"</span>);</div><div class="line">　　　　&#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>jQuery.publish(&quot;done&quot;)</code>的意思是，<code>f1</code>执行完成后，向”信号中心<code>&quot;jQuery</code>发布<code>&quot;done&quot;</code>信号，从而引发f2的执行。 此外，f2完成执行后，也可以取消订阅（<code>unsubscribe</code>）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery.unsubscribe(<span class="string">"done"</span>, f2);</div></pre></td></tr></table></figure><ul><li>这种方法的性质与”事件监听”类似，但是明显优于后者。因为我们可以通过查看”消息中心”，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</li></ul><h2 id="三、Promise"><a href="#三、Promise" class="headerlink" title="三、Promise"></a>三、Promise</h2><hr><blockquote><ul><li><code>Promise</code> 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大</li><li>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，<code>Promise</code> 是一个对象，从它可以获取异步操作的消息。<code>Promise</code> 提供统一的 <code>API</code>，各种异步操作都可以用同样的方法进行处理</li></ul></blockquote><ul><li>简单说，它的思想是，每一个异步任务返回一个<code>Promise</code>对象，该对象有一个<code>then</code>方法，允许指定回调函数。</li><li>现在我们使用 <code>Promise</code> 重新实现上面的案例，首先，我们要把异步请求数据的方法封装成 <code>Promise</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataAsync</span> (<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">var</span> res = &#123;</div><div class="line">                url: url,</div><div class="line">                data: <span class="built_in">Math</span>.random()</div><div class="line">            &#125;</div><div class="line">            resolve(res)</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>那么请求的代码应该这样写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">getDataAsync(<span class="string">'/page/1?param=123'</span>)</div><div class="line">    .then(<span class="function"><span class="params">res1</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(res1)</div><div class="line">        <span class="keyword">return</span> getDataAsync(<span class="string">`/page/2?param=<span class="subst">$&#123;res1.data&#125;</span>`</span>)</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="params">res2</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(res2)</div><div class="line">        <span class="keyword">return</span> getDataAsync(<span class="string">`/page/3?param=<span class="subst">$&#123;res2.data&#125;</span>`</span>)</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="params">res3</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(res3)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><ul><li><code>then</code> 方法返回一个新的 <code>Promise</code> 对象，<code>then</code> 方法的链式调用避免了 <code>CallBack</code> 回调地狱</li><li>但也并不是完美，比如我们要添加很多 <code>then</code> 语句， 每一个 <code>then</code> 还是要写一个回调。</li><li>如果场景再复杂一点，比如后边的每一个请求依赖前面所有请求的结果，而不仅仅依赖上一次请求的结果，那会更复杂。 为了做的更好，<code>async/await</code> 就应运而生了，来看看使用 <code>async/await</code> 要如何实现</li></ul><h2 id="四、async-await"><a href="#四、async-await" class="headerlink" title="四、async/await"></a>四、async/await</h2><hr><ul><li><p><code>await</code>后面必须是一个<code>Promise</code>对象</p></li><li><p><code>getDataAsync</code> 方法不变，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getDataAsync</span> (<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">var</span> res = &#123;</div><div class="line">                url: url,</div><div class="line">                data: <span class="built_in">Math</span>.random()</div><div class="line">            &#125;</div><div class="line">            resolve(res)</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>业务代码如下</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> res1 = <span class="keyword">await</span> getDataAsync(<span class="string">'/page/1?param=123'</span>)</div><div class="line">    <span class="built_in">console</span>.log(res1)</div><div class="line">    <span class="keyword">var</span> res2 = <span class="keyword">await</span> getDataAsync(<span class="string">`/page/2?param=<span class="subst">$&#123;res1.data&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(res2)</div><div class="line">    <span class="keyword">var</span> res3 = <span class="keyword">await</span> getDataAsync(<span class="string">`/page/2?param=<span class="subst">$&#123;res2.data&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(res3)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>可以看到使用<code>async\await</code>就像写同步代码一样</li><li>对比 <code>Promise</code> 感觉怎么样？是不是非常清晰，但是 <code>async/await</code> 是基于 <code>Promise</code> 的，因为使用 <code>async</code> 修饰的方法最终返回一个 <code>Promise</code>， 实际上，<code>async/await</code> 可以看做是使用 <code>Generator</code> 函数处理异步的语法糖，我们来看看如何使用 <code>Generator</code> 函数处理异步</li></ul><h2 id="五、Generator"><a href="#五、Generator" class="headerlink" title="五、Generator"></a>五、Generator</h2><hr><ul><li>首先异步函数依然是</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataAsync</span> (<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">var</span> res = &#123;</div><div class="line">                url: url,</div><div class="line">                data: <span class="built_in">Math</span>.random()</div><div class="line">            &#125;</div><div class="line">            resolve(res)</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>使用 <code>Generator</code> 函数可以这样写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> * <span class="title">getData</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> res1 = <span class="keyword">yield</span> getDataAsync(<span class="string">'/page/1?param=123'</span>)</div><div class="line">    <span class="built_in">console</span>.log(res1)</div><div class="line">    <span class="keyword">var</span> res2 = <span class="keyword">yield</span> getDataAsync(<span class="string">`/page/2?param=<span class="subst">$&#123;res1.data&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(res2)</div><div class="line">    <span class="keyword">var</span> res3 = <span class="keyword">yield</span> getDataAsync(<span class="string">`/page/2?param=<span class="subst">$&#123;res2.data&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(res3))</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>然后我们这样逐步执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> g = getData()</div><div class="line">g.next().value.then(<span class="function"><span class="params">res1</span> =&gt;</span> &#123;</div><div class="line">    g.next(res1).value.then(<span class="function"><span class="params">res2</span> =&gt;</span> &#123;</div><div class="line">        g.next(res2).value.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            g.next()</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>上面的代码，我们逐步调用遍历器的 <code>next()</code> 方法，由于每一个 <code>next()</code> 方法返回值的 <code>value</code> 属性为一个 <code>Promise</code>对象</li><li>所以我们为其添加 <code>then</code> 方法， 在 <code>then</code> 方法里面接着运行 <code>next</code> 方法挪移遍历器指针，直到 <code>Generator</code> 函数运行完成，实际上，这个过程我们不必手动完成，可以封装成一个简单的执行器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params">gen</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> g = gen()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> res = g.next(data)</div><div class="line">        <span class="keyword">if</span> (res.done) <span class="keyword">return</span> res.value</div><div class="line">        res.value.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">            next(data)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    next()</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>run 方法用来自动运行异步的 Generator 函数，其实就是一个递归的过程调用的过程。这样我们就不必手动执行 Generator 函数了。 有了 run 方法，我们只需要这样运行 getData 方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run(getData)</div></pre></td></tr></table></figure><blockquote><p>这样，我们就可以把异步操作封装到 <code>Generator</code> 函数内部，使用 <code>run</code> 方法作为 <code>Generator</code> 函数的自执行器，来处理异步。其实我们不难发现， <code>async/await</code> 方法相比于 <code>Generator</code> 处理异步的方式，有很多相似的地方，只不过 <code>async/await</code> 在语义化方面更加明显，同时 <code>async/await</code> 不需要我们手写执行器，其内部已经帮我们封装好了，这就是为什么说 <code>async/await</code> 是 <code>Generator</code> 函数处理异步的语法糖了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;整理于互联网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;JavaScript&lt;/code&gt;的世界中，所有代码都是单线程执行的&lt;/li&gt;
&lt;li&gt;由于这个“缺陷”，导致&lt;code&gt;JavaScript&lt;/code&gt;的所有网络操作，浏览器事件，都必须是异
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="异步回调" scheme="http://blog.poetries.top/tags/%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83/"/>
    
  </entry>
  
  <entry>
    <title>移动端meta标签一览</title>
    <link href="http://blog.poetries.top/2017/08/23/mobile_meta_summary/"/>
    <id>http://blog.poetries.top/2017/08/23/mobile_meta_summary/</id>
    <published>2017-08-23T10:40:43.000Z</published>
    <updated>2017-09-17T12:12:07.735Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> <span class="comment">&lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span> <span class="comment">&lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 声明文档使用的字符编码 --&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></div><div class="line">     </div><div class="line">    <span class="comment">&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 页面描述 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"不超过150个字符"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 页面关键词 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 网页作者 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"name, email@gmail.com"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 搜索引擎抓取 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 为移动设备添加 viewport --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- iOS 设备 begin --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"标题"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 设置苹果工具栏颜色 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telphone=no, email=no"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 不让百度转码 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-siteapp"</span> /&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 微软的老式浏览器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- uc强制竖屏 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"screen-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- UC强制全屏 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- QQ强制全屏 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- UC应用模式 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"browsermode"</span> <span class="attr">content</span>=<span class="string">"application"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- QQ应用模式 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-page-mode"</span> <span class="attr">content</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- iOS 图标 begin --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-57x57-precomposed.png"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"114x114"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-114x114-precomposed.png"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"144x144"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-144x144-precomposed.png"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- iOS 图标 end --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- iOS 启动画面 begin --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"768x1004"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-768x1004.png"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"1536x2008"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-1536x2008.png"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"1024x748"</span> <span class="attr">href</span>=<span class="string">"/Default-Portrait-1024x748.png"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"2048x1496"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-2048x1496.png"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-320x480.png"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"640x960"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-640x960.png"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"640x1136"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-640x1136.png"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- iOS 启动画面 end --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- iOS 设备 end --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileColor"</span> <span class="attr">content</span>=<span class="string">"#000"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- Windows 8 磁贴颜色 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileImage"</span> <span class="attr">content</span>=<span class="string">"icon.png"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- Windows 8 磁贴图标 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"application/rss+xml"</span> <span class="attr">title</span>=<span class="string">"RSS"</span> <span class="attr">href</span>=<span class="string">"/rss.xml"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 添加 RSS 订阅 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/ico"</span> <span class="attr">href</span>=<span class="string">"/favicon.ico"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 添加 favicon icon --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- sns 社交标签 begin --&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 参考微博API --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:type"</span> <span class="attr">content</span>=<span class="string">"类型"</span> /&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"URL地址"</span> /&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"标题"</span> /&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"图片"</span> /&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"描述"</span> /&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- sns 社交标签 end --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="移动端" scheme="http://blog.poetries.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ES6笔记记录</title>
    <link href="http://blog.poetries.top/2017/08/20/es6-note-record/"/>
    <id>http://blog.poetries.top/2017/08/20/es6-note-record/</id>
    <published>2017-08-20T06:33:00.000Z</published>
    <updated>2017-09-17T12:12:07.719Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/ES1.png" alt=""></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/ES2.png" alt=""></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/ES3.png" alt=""></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/ES4.png" alt=""></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/ES5.png" alt=""></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/ES6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z0.glb.clouddn.com/ES1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z0.glb.clouddn.com/ES2.png&quot; alt=&quot;&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://blog.poetries.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记总结篇</title>
    <link href="http://blog.poetries.top/2017/07/29/git-notes/"/>
    <id>http://blog.poetries.top/2017/07/29/git-notes/</id>
    <published>2017-07-29T13:30:24.000Z</published>
    <updated>2017-09-17T12:12:07.719Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明：资料来源互联网</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><hr><ul><li><p>在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://msysgit.github.io/</div></pre></td></tr></table></figure></li><li><p>完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。</p></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><hr><ul><li>首先是配置帐号信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git config -e [--global] # 编辑Git配置文件</div><div class="line">git config --global user.name yanhaijing</div><div class="line">git config --global user.email yanhaijing@yeah.net</div><div class="line">git config --list #查看配置的信息</div><div class="line">git help config #获取帮助信息</div></pre></td></tr></table></figure><ul><li>配置自动换行（自动转换坑太大）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global core.autocrlf input #提交到git是自动将换行符转换为lf</div></pre></td></tr></table></figure><ul><li>配置密钥</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C yanhaijing@yeah.net #生成密钥</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com #测试是否成功</div></pre></td></tr></table></figure><ul><li>配置别名，git的命令没有自动完成功能，有点坑哈，别名派上了用场</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git config --global alias.st status #git st</div><div class="line">git config --global alias.co checkout #git co</div><div class="line">git config --global alias.br branch #git br</div><div class="line">git config --global alias.ci commit #git ci</div></pre></td></tr></table></figure><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git init #初始化</div><div class="line">git status #获取状态</div><div class="line">git add [file1] [file2] ... #.或*代表全部添加</div><div class="line">git commit -m &quot;message&quot; #此处注意乱码</div><div class="line">git remote add origin git@github.com:yanhaijing/test.git #添加源</div><div class="line">git push -u origin master #push同事设置默认跟踪分支</div></pre></td></tr></table></figure><h3 id="从现有仓库克隆"><a href="#从现有仓库克隆" class="headerlink" title="从现有仓库克隆"></a>从现有仓库克隆</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/yanhaijing/data.js.git    </div><div class="line">git clone git://github.com/schacon/grit.git mypro#克隆到自定义文件夹</div></pre></td></tr></table></figure><h3 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">git add * # 跟踪新文件</div><div class="line">git add -u [path] # 添加[指定路径下]已跟踪文件</div><div class="line"></div><div class="line">rm *&amp;git rm * # 移除文件</div><div class="line">git rm -f * # 移除文件</div><div class="line">git rm --cached * # 停止追踪指定文件，但该文件会保留在工作区</div><div class="line">git mv file_from file_to # 重命名跟踪文件</div><div class="line"></div><div class="line">git log # 查看提交记录</div><div class="line"></div><div class="line">git commit # 提交更新    </div><div class="line">git commit [file1] [file2] ... # 提交指定文件    </div><div class="line">git commit -m &apos;message&apos;</div><div class="line">git commit -a # 跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交</div><div class="line">git commit --amend#修改最后一次提交</div><div class="line">git commit -v # 提交时显示所有diff信息</div><div class="line"></div><div class="line">git reset HEAD *#取消已经暂存的文件</div><div class="line">git reset --mixed HEAD *#同上</div><div class="line">git reset --soft HEAD *#重置到指定状态，不会修改索引区和工作树</div><div class="line">git reset --hard HEAD *#重置到指定状态，会修改索引区和工作树</div><div class="line">git reset -- files#重置index区文件</div><div class="line"></div><div class="line">git revert HEAD #撤销前一次操作</div><div class="line">git revert HEAD~ #撤销前前一次操作</div><div class="line">git revert commit ## 撤销指定操作</div><div class="line"></div><div class="line">git checkout -- file#取消对文件的修改（从暂存区——覆盖worktree file）</div><div class="line">git checkout branch|tag|commit -- file_name#从仓库取出file覆盖当前分支</div><div class="line">git checkout -- .#从暂存区取出文件覆盖工作区</div><div class="line"></div><div class="line">git diff file #查看指定文件的差异</div><div class="line">git diff --stat #查看简单的diff结果</div><div class="line">git diff #比较Worktree和Index之间的差异</div><div class="line">git diff --cached #比较Index和HEAD之间的差异</div><div class="line">git diff HEAD #比较Worktree和HEAD之间的差异</div><div class="line">git diff branch #比较Worktree和branch之间的差异</div><div class="line">git diff branch1 branch2 #比较两次分支之间的差异</div><div class="line">git diff commit commit #比较两次提交之间的差异</div><div class="line"></div><div class="line">git log #查看最近的提交日志</div><div class="line">git log --pretty=oneline #单行显示提交日志</div><div class="line">git log --graph # 图形化显示</div><div class="line">git log --abbrev-commit # 显示log id的缩写</div><div class="line">git log -num #显示第几条log（倒数）</div><div class="line">git log --stat # 显示commit历史，以及每次commit发生变更的文件</div><div class="line">git log --follow [file] # 显示某个文件的版本历史，包括文件改名</div><div class="line">git log -p [file] # 显示指定文件相关的每一次diff</div><div class="line"></div><div class="line">git stash #将工作区现场（已跟踪文件）储藏起来，等以后恢复后继续工作。</div><div class="line">git stash list #查看保存的工作现场</div><div class="line">git stash apply #恢复工作现场</div><div class="line">git stash drop #删除stash内容</div><div class="line">git stash pop #恢复的同时直接删除stash内容</div><div class="line">git stash apply stash@&#123;0&#125; #恢复指定的工作现场，当你保存了不只一份工作现场时。</div></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">git branch#列出本地分支</div><div class="line">git branch -r#列出远端分支</div><div class="line">git branch -a#列出所有分支</div><div class="line">git branch -v#查看各个分支最后一个提交对象的信息</div><div class="line">git branch --merge#查看已经合并到当前分支的分支</div><div class="line">git branch --no-merge#查看为合并到当前分支的分支</div><div class="line">git branch test#新建test分支</div><div class="line">git branch branch [branch|commit|tag] # 从指定位置出新建分支</div><div class="line">git branch --track branch remote-branch # 新建一个分支，与指定的远程分支建立追踪关系</div><div class="line">git branch -m old new #重命名分支</div><div class="line">git branch -d test#删除test分支</div><div class="line">git branch -D test#强制删除test分支</div><div class="line">git branch --set-upstream dev origin/dev #将本地dev分支与远程dev分支之间建立链接</div><div class="line"></div><div class="line">git checkout test#切换到test分支</div><div class="line">git checkout -b test#新建+切换到test分支</div><div class="line">git checkout -b test dev#基于dev新建test分支，并切换</div><div class="line"></div><div class="line">git merge test#将test分支合并到当前分支</div><div class="line">git merge --squash test ## 合并压缩，将test上的commit压缩为一条</div><div class="line"></div><div class="line">git cherry-pick commit #拣选合并，将commit合并到当前分支</div><div class="line">git cherry-pick -n commit #拣选多个提交，合并完后可以继续拣选下一个提交</div><div class="line"></div><div class="line">git rebase master#将master分之上超前的提交，变基到当前分支</div><div class="line">git rebase --onto master 169a6 #限制回滚范围，rebase当前分支从169a6以后的提交</div><div class="line">git rebase --interactive #交互模式    </div><div class="line">git rebase --continue# 处理完冲突继续合并    </div><div class="line">git rebase --skip# 跳过    </div><div class="line">git rebase --abort# 取消合并</div></pre></td></tr></table></figure><h3 id="远端"><a href="#远端" class="headerlink" title="远端"></a>远端</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">git fetch origin remotebranch[:localbranch]# 从远端拉去分支[到本地指定分支]</div><div class="line"></div><div class="line">git merge origin/branch#合并远端上指定分支</div><div class="line"></div><div class="line">git pull origin remotebranch:localbranch# 拉去远端分支到本地分支</div><div class="line"></div><div class="line">git push origin branch#将当前分支，推送到远端上指定分支</div><div class="line">git push origin localbranch:remotebranch#推送本地指定分支，到远端上指定分支</div><div class="line">git push origin :remotebranch # 删除远端指定分支</div><div class="line">git push origin remotebranch --delete # 删除远程分支</div><div class="line">git branch -dr branch # 删除本地和远程分支</div><div class="line">git checkout -b [--track] test origin/dev#基于远端dev分支，新建本地test分支[同时设置跟踪]</div></pre></td></tr></table></figure><h3 id="源"><a href="#源" class="headerlink" title="源"></a>源</h3><hr><blockquote><p>git是一个分布式代码管理工具，所以可以支持多个仓库，在git里，服务器上的仓库在本地称之为remote。</p></blockquote><ul><li>个人开发时，多源用的可能不多，但多源其实非常有用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git remote add origin1 git@github.com:yanhaijing/data.js.git</div><div class="line"></div><div class="line">git remote#显示全部源</div><div class="line">git remote -v#显示全部源+详细信息</div><div class="line"></div><div class="line">git remote rename origin1 origin2#重命名</div><div class="line"></div><div class="line">git remote rm origin#删除</div><div class="line"></div><div class="line">git remote show origin#查看指定源的全部信息</div></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><hr><blockquote><p>当开发到一定阶段时，给程序打标签是非常棒的功能。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">git tag#列出现有标签    </div><div class="line"></div><div class="line">git tag v0.1 [branch|commit] # [从指定位置]新建标签</div><div class="line">git tag -a v0.1 -m &apos;my version 1.4&apos;#新建带注释标签</div><div class="line"></div><div class="line">git checkout tagname#切换到标签</div><div class="line"></div><div class="line">git push origin v1.5#推送分支到源上</div><div class="line">git push origin --tags#一次性推送所有分支</div><div class="line"></div><div class="line">git tag -d v0.1#删除标签</div><div class="line">git push origin :refs/tags/v0.1#删除远程标签</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;声明：资料来源互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 Windows 上
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Git" scheme="http://blog.poetries.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 常用快捷键</title>
    <link href="http://blog.poetries.top/2017/07/23/vs-keyboard-shortcuts/"/>
    <id>http://blog.poetries.top/2017/07/23/vs-keyboard-shortcuts/</id>
    <published>2017-07-23T11:40:03.000Z</published>
    <updated>2017-09-17T12:12:07.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主命令框"><a href="#主命令框" class="headerlink" title="主命令框"></a>主命令框</h3><blockquote><p><code>F1</code> 或 <code>Ctrl+Shift+P</code>: 打开命令面板。在打开的输入框内，可以输入任何命令</p><ul><li>按一下 <code>Backspace</code>会进入到 <code>Ctrl+P</code>模式<br>在 </li><li><code>Ctrl+P</code> 下输入 &gt; 可以进入 <code>Ctrl+Shift+P</code> 模式</li></ul></blockquote><p><strong>在 <code>Ctrl+P</code> 窗口下还可以</strong></p><ul><li>直接输入文件名，跳转到文件</li><li><code>?</code> 列出当前可执行的动作</li><li>! 显示 <code>Errors</code>或 <code>Warnings</code>，也可以 <code>Ctrl+Shift+M</code></li><li>: 跳转到行数，也可以 <code>Ctrl+G</code> 直接进入</li><li>@ 跳转到 <code>symbol</code>（搜索变量或者函数），也可以 <code>Ctrl+Shift+O</code>直接进入</li><li>@ 根据分类跳转 - <code>symbol</code>，查找属性或函数，也可以 <code>Ctrl+Shift+O</code>后输入:进入</li><li>#根据名字查找 <code>symbol</code>，也可以 <code>Ctrl+T</code></li></ul><h3 id="编辑器与窗口管理"><a href="#编辑器与窗口管理" class="headerlink" title="编辑器与窗口管理"></a>编辑器与窗口管理</h3><ul><li>打开一个新窗口： <code>Ctrl+Shift+N</code></li><li>关闭窗口： <code>Ctrl+Shift+W</code></li><li>新建文件 <code>Ctrl+N</code></li><li>文件之间切换 <code>Ctrl+Tab</code></li></ul><h3 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h3><h4 id="格式调整"><a href="#格式调整" class="headerlink" title="格式调整"></a>格式调整</h4><ul><li>代码行缩进 <code>Ctrl+[</code> 、 <code>Ctrl+]</code></li><li><code>Ctrl+C</code>、 <code>Ctrl+V</code> 复制或剪切当前行/当前选中内容</li><li>代码格式化： <code>Ctrl+Shift+P</code> 后输入 <code>format code</code></li><li>上下移动一行：<code>Alt+Up</code>或 <code>Alt+Down</code></li><li>向上向下复制一行： <code>Shift+Alt+Up</code>或 <code>Shift+Alt+Down</code></li><li>在当前行下边插入一行 <code>Ctrl+Enter</code></li><li>在当前行上方插入一行 <code>Ctrl+Shift+Enter</code></li></ul><h4 id="光标相关"><a href="#光标相关" class="headerlink" title="光标相关"></a>光标相关</h4><ul><li>移动到行首： <code>Home</code></li><li>移动到行尾： <code>End</code></li><li>移动到文件结尾： <code>Ctrl+End</code></li><li>移动到文件开头： <code>Ctrl+Home</code></li><li>移动到定义处： <code>F12</code></li><li>多行编辑(列编辑)：<code>Alt+Shift+</code>鼠标左键</li><li>同时选中所有匹配： <code>Ctrl+Shift+L</code></li></ul><h3 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h3><ul><li>找到所有的引用： <code>Shift+F12</code></li><li>同时修改本文件中所有匹配的： <code>Ctrl+F12</code></li><li>重命名：比如要修改一个方法名，可以选中后按 <code>F2</code>，输入新的名字，回车，会发现所有的文件都修改了</li><li>跳转到下一个 <code>Error</code> 或 <code>Warning</code>：当有多个错误时可以按 <code>F8</code> 逐个跳转</li></ul><h3 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h3><ul><li>查找 <code>Ctrl+F</code></li><li>查找替换 <code>Ctrl+H</code></li><li>整个文件夹中查找 <code>Ctrl+Shift+F</code></li></ul><h3 id="显示相关"><a href="#显示相关" class="headerlink" title="显示相关"></a>显示相关</h3><ul><li>全屏：<code>F11</code></li><li>侧边栏显/隐：<code>Ctrl+B</code></li><li>显示资源管理器 <code>Ctrl+Shift+E</code></li><li>显示搜索 <code>Ctrl+Shift+F</code></li><li>显示 <code>Debug Ctrl+Shift+D</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;主命令框&quot;&gt;&lt;a href=&quot;#主命令框&quot; class=&quot;headerlink&quot; title=&quot;主命令框&quot;&gt;&lt;/a&gt;主命令框&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;F1&lt;/code&gt; 或 &lt;code&gt;Ctrl+Shift+P&lt;/code&gt;: 打开命令
      
    
    </summary>
    
      <category term="工欲善其事必先利其器" scheme="http://blog.poetries.top/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
      <category term="VS" scheme="http://blog.poetries.top/tags/VS/"/>
    
  </entry>
  
  <entry>
    <title>移动端适配</title>
    <link href="http://blog.poetries.top/2017/05/23/mobile-adaptation/"/>
    <id>http://blog.poetries.top/2017/05/23/mobile-adaptation/</id>
    <published>2017-05-23T13:35:08.000Z</published>
    <updated>2017-09-17T12:12:07.735Z</updated>
    
    <content type="html"><![CDATA[<ul><li>物理像素:移动端设备的分辨率</li><li>独立像素:css的像素  320  375 </li><li>像素比 = 物理像素/独立像素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;</div></pre></td></tr></table></figure><ul><li><p><code>width=device-width</code>  设备宽度 <code>640px</code>(低版本的安卓手机不支持数字) 这个属性在不支持<code>IE</code></p></li><li><p><code>initial-scale=1.0</code>(初始缩放比),能够起到和<code>width=device-width</code>相同的效果(把理想的视窗设置为设备的宽度)     两个配合使用就能够很好的解决移动端各设备的适配问题</p></li><li><p><code>maximum-scale=1.0</code>最大缩放比例</p></li><li><code>user-scalable=0</code>禁止缩放</li><li><code>minimum-scale=1.0</code> 最小缩放比例</li></ul><h3 id="移动端布局方法"><a href="#移动端布局方法" class="headerlink" title="移动端布局方法"></a>移动端布局方法</h3><hr><ul><li><p>1、流式布局  与设备等宽 做自适应  100%或者具体的像素值</p></li><li><p>2、<code>rem</code>做盒子的宽度，viewport缩放</p></li><li><p>3、固定宽度  <code>viewport</code>缩放  <code>content=&quot;width=640, initial-scale=0.5, maximum-scale=0.5, user-scalable=0&quot;</code>（用的比较少）</p></li><li><p>4、<code>vw/vh</code> 相对于viewport理想视窗(设备)的比例(兼容性不好)<br>  <code>1vw = 10%</code>设备宽 <code>10vw</code></p></li></ul><h3 id="meta标签属性设置"><a href="#meta标签属性设置" class="headerlink" title="meta标签属性设置"></a>meta标签属性设置</h3><hr><p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge chrome=1&quot;&gt;</code></p><ul><li>IE8<code>浏览器的显示方式:</code>IE=edge<code>以</code>IE`最高版本显示</li><li>chrome=1 以谷歌浏览器模式渲染(GCF(Google Chrome Frame))</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;referrer&quot; content=&quot;never&quot;&gt;</div></pre></td></tr></table></figure><ul><li>referrer 告诉浏览器链接来源于哪里(计算网页上链接的访问量)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no,adress=no&quot;&gt;</div></pre></td></tr></table></figure><ul><li>格式检测:（数字、邮箱、地址） no不识别为电话号码、邮箱、地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</div></pre></td></tr></table></figure><ul><li>删除默认的苹果工具栏、菜单栏(全屏显示)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-touch-fullscreen&quot; =&quot;yes&quot;&gt;</div></pre></td></tr></table></figure><ul><li>全屏显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;</div></pre></td></tr></table></figure><ul><li>设置app应用下状态条的颜色</li><li>默认值default (白色)  black（黑色）</li><li><code>black-translucent</code>（灰色半透明）若果设置为这个值会占据页面的<code>px</code>位置浮在页面上方<code>20px</code>高度 <code>iphone4</code>是<code>40px</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</div></pre></td></tr></table></figure><ul><li><code>360</code>模式固定为极速模式</li></ul><h3 id="常见的meta属性"><a href="#常见的meta属性" class="headerlink" title="常见的meta属性"></a>常见的meta属性</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</div><div class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</div><div class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;</div><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0，minimum-scale=1.0&quot;&gt;</div></pre></td></tr></table></figure><h3 id="link-扩展"><a href="#link-扩展" class="headerlink" title="link 扩展"></a>link 扩展</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;xxx.com&quot;&gt;</div></pre></td></tr></table></figure><blockquote><p> 预解析技术，当浏览网页时，浏览器会在加载页面的时对页面中的域名进行解析缓存，当我们点击这些网页的链接时就不需要再进行DNS的解析，减少用户的等待时间，提高用户的体验度</p></blockquote><ul><li><code>rem</code>  根目录 <code>html</code> 的<code>font-size</code>尺寸默认为<code>16px</code>  <code>1rem = 16px;</code></li><li><code>1rem = html</code>的<code>font-size</code>的尺寸大小</li></ul><h3 id="参考学习资料"><a href="#参考学习资料" class="headerlink" title="参考学习资料"></a>参考学习资料</h3><hr><ul><li><a href="https://h5.m.taobao.com/#index" target="_blank" rel="external">https://h5.m.taobao.com/#index</a> 手机淘宝 rem</li><li><a href="http://m.jd.com/" target="_blank" rel="external">http://m.jd.com/</a>  手机京东 100%</li><li><a href="http://m.lizhi.fm/" target="_blank" rel="external">http://m.lizhi.fm/</a> 荔枝 640视窗</li><li><a href="http://jx.tmall.com/" target="_blank" rel="external">http://jx.tmall.com/</a> 天猫 100%</li><li><a href="http://3g.163.com/touch/all?nav=1&amp;version=v_standard" target="_blank" rel="external">http://3g.163.com/touch/all?nav=1&amp;version=v_standard</a>   网易 rem</li></ul><ul><li><a href="http://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="external">http://www.cnblogs.com/2050/p/3877280.html</a>  viewport 解析</li><li><a href="http://ymblog.net/2015/07/01/%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AFmeta%E6%A0%87%E7%AD%BE%E8%BD%AC/" target="_blank" rel="external">http://ymblog.net/2015/07/01/%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AFmeta%E6%A0%87%E7%AD%BE%E8%BD%AC/</a>  meta解析</li><li><a href="http://ljinkai.github.io/2015/06/06/mobile-web-skill/" target="_blank" rel="external">http://ljinkai.github.io/2015/06/06/mobile-web-skill/</a>  移动端布局注意技巧</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;物理像素:移动端设备的分辨率&lt;/li&gt;
&lt;li&gt;独立像素:css的像素  320  375 &lt;/li&gt;
&lt;li&gt;像素比 = 物理像素/独立像素&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="HTML5" scheme="http://blog.poetries.top/tags/HTML5/"/>
    
      <category term="移动端" scheme="http://blog.poetries.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>forever and pm2部署nodejs项目</title>
    <link href="http://blog.poetries.top/2017/05/09/forever-pm2/"/>
    <id>http://blog.poetries.top/2017/05/09/forever-pm2/</id>
    <published>2017-05-09T14:50:08.000Z</published>
    <updated>2017-09-17T12:12:07.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、forever"><a href="#一、forever" class="headerlink" title="一、forever"></a>一、forever</h2><blockquote><p><code>forever</code>则可以在<code>cmd</code>或<code>ssh</code>连接断开时,让项目一直运行,而且可以在项目崩溃时自动重启</p></blockquote><ul><li>安装 <code>npm install -g forever</code></li><li><code>forever</code>的帮助手册  <code>forever --help</code></li><li>使用<code>forever</code>启动项目 <code>forever start app.js</code></li><li>使用<code>forever</code>停止项目 <code>forever stop app.js</code></li><li>列出所有通过<code>forever</code>管理的项目 <code>forever list</code></li><li>监视项目中的文件,当文件有变动时重启项目 <code>forever -w start app.js</code></li></ul><h2 id="二、pm2"><a href="#二、pm2" class="headerlink" title="二、pm2"></a>二、pm2</h2><ul><li>安装pm2 <code>npm install -g pm2</code></li><li>运行<code>pm2 start app.js</code></li><li>查看运行状态 <code>pm2 list</code></li><li>追踪资源运行情况 <code>pm2 monit</code></li><li>查看日志 <code>pm2 logs</code></li><li>重启应用 <code>pm2 restart appId</code></li><li>停止应用  <code>pm2 stop app.js</code></li><li>开启<code>api</code>访问 <code>pm2 web</code></li></ul><p><strong>预定义运行配置文件</strong></p><blockquote><p>我们可以预定义一个配置文件，然后制定运行这个配置文件，比如我们定义一个文件<code>process.json</code>，内容如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;apps&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;name&quot;: &quot;ANodeBlog&quot;,</div><div class="line">      &quot;script&quot;: &quot;bin/www&quot;,</div><div class="line">      &quot;watch&quot;: &quot;../&quot;,</div><div class="line">      &quot;log_date_format&quot;: &quot;YYYY-MM-DD HH:mm Z&quot;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>然后<code>pm2 start process.json</code></li></ul><p><strong>pm2与forever对比</strong></p><table><thead><tr><th>Feature</th><th>Forever</th><th>PM2</th></tr></thead><tbody><tr><td>Keep Alive</td><td>✔</td><td>✔</td></tr><tr><td>Coffeescript</td><td>✔</td><td></td></tr><tr><td>Log aggregation</td><td></td><td>✔</td></tr><tr><td>API</td><td></td><td>✔</td></tr><tr><td>Terminal monitoring</td><td></td><td>✔</td></tr><tr><td>Clustering</td><td></td><td>✔</td></tr><tr><td>JSON configuration</td><td></td><td>✔</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、forever&quot;&gt;&lt;a href=&quot;#一、forever&quot; class=&quot;headerlink&quot; title=&quot;一、forever&quot;&gt;&lt;/a&gt;一、forever&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;forever&lt;/code&gt;则可以在&lt;code
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Node" scheme="http://blog.poetries.top/tags/Node/"/>
    
      <category term="部署" scheme="http://blog.poetries.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Nginx基础配置篇</title>
    <link href="http://blog.poetries.top/2017/05/08/nginx/"/>
    <id>http://blog.poetries.top/2017/05/08/nginx/</id>
    <published>2017-05-08T14:35:08.000Z</published>
    <updated>2017-09-17T12:12:07.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx的启动、停止与重启"><a href="#Nginx的启动、停止与重启" class="headerlink" title="Nginx的启动、停止与重启"></a>Nginx的启动、停止与重启</h3><ul><li>建立软连接<code>Nginx</code>到<code>/usr/bin</code>目录下 <code>ln -s /usr/sbin/nginx /usr/bin</code></li></ul><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><ul><li>启动代码格式：<code>nginx</code>安装目录地址 <code>-c nginx</code>配置文件地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@LinuxServer sbin]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure><h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><blockquote><p> nginx的停止有三种方式</p></blockquote><p><strong>从容停止</strong></p><ul><li>查看进程号 <code>ps -ef|grep nginx</code></li></ul><p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102182744854-1291053517.png" alt=""></p><ul><li>杀死进程 kill -QUIT 2072</li></ul><p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102182652354-960281274.png" alt=""></p><p><strong>快速停止</strong></p><ul><li>查看进程号 <code>ps -ef|grep nginx</code></li></ul><p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102183103651-1859453208.png" alt=""></p><ul><li>杀死进程 <code>kill -TERM 2132</code>  <code>kill -INT 2132</code></li></ul><p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102183340010-2024212451.png" alt=""></p><ul><li>强制停止 <code>pkill -9 nginx</code></li></ul><p><strong>重启</strong></p><blockquote><p>验证<code>nginx</code>配置文件是否正确</p></blockquote><ul><li>方法一：进入<code>nginx</code>安装目录<code>sbin</code>下，输入命令<code>./nginx -t</code><br>看到如下显示<code>nginx.conf syntax is ok nginx.conf test is successful</code>说明配置文件正确</li></ul><p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102184633432-1268782338.png" alt=""></p><ul><li>方法二：在启动命令<code>-c</code>前加<code>-t</code></li></ul><p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102185023385-456612180.png" alt=""></p><p><strong>重启Nginx服务</strong></p><ul><li>方法一：进入<code>nginx</code>可执行目录<code>sbin</code>下，输入命令<code>./nginx -s reload</code>即可</li></ul><p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102185521057-1341380905.png" alt=""></p><ul><li>方法二：查找当前<code>nginx</code>进程号，然后输入命令：<code>kill -HUP</code> 进程号 实现重启<code>nginx</code>服务<br><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102185838167-234856506.png" alt=""></li></ul><h3 id="Nginx基础配置"><a href="#Nginx基础配置" class="headerlink" title="Nginx基础配置"></a>Nginx基础配置</h3><ul><li>在<code>Nginx</code>目录下的<code>vhost或conf.d</code>目录下新建一个配置文件（如<code>poetries-80.conf</code>）</li><li>把server的内容配置进去</li><li>在<code>Nginx.conf</code>中的<code>http</code>下<code>include</code>配置文件</li><li>检测配置文件是否出错 <code>切换到/etc/nginx下 nginx -t</code></li><li>重新加载配置文件 <code>nginx -c /usr/local/etc/nginx/nginx.conf</code></li><li>在重启<code>Nginx</code>  <code>nginx -s reload</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">user  root;  <span class="comment">//Nginx需要有有一个用户</span></div><div class="line">worker_processes  <span class="number">2</span>; <span class="comment">// Nginx进程数 最大1024</span></div><div class="line">pid        conf/nginx.pid; </div><div class="line">worker_rlimit_nofile <span class="number">2048</span>;</div><div class="line">events &#123;</div><div class="line">    use epoll;</div><div class="line">    worker_connections  <span class="number">2048</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line"> </div><div class="line"></div><div class="line">server &#123;</div><div class="line">       listen       <span class="number">80</span>;</div><div class="line">       server_name  <span class="number">119.29</span><span class="number">.145</span><span class="number">.252</span>;</div><div class="line">   </div><div class="line">       location / &#123;</div><div class="line">           root   /usr/local/nginx/html;</div><div class="line">           index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line">   server &#123;</div><div class="line">       listen       <span class="number">3001</span>;</div><div class="line">       server_name  <span class="number">119.29</span><span class="number">.145</span><span class="number">.252</span>;</div><div class="line">   </div><div class="line">       location / &#123;</div><div class="line">           root   /usr/local/nginx/book;</div><div class="line">           index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line">   server &#123;</div><div class="line">       listen       <span class="number">9000</span>;</div><div class="line">       server_name  <span class="number">119.29</span><span class="number">.145</span><span class="number">.252</span>;</div><div class="line">   </div><div class="line">       location / &#123;</div><div class="line">           root   /usr/local/nginx/vue;</div><div class="line">           index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="一些错误"><a href="#一些错误" class="headerlink" title="一些错误"></a>一些错误</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx: [error] invalid PID number “” <span class="keyword">in</span> “/usr/local/<span class="keyword">var</span>/run/nginx/nginx.pid”</div></pre></td></tr></table></figure><ul><li>解决办法：<code>nginx -c /usr/local/etc/nginx/nginx.conf</code></li><li><code>nginx -s reload</code></li></ul><p><strong>权限问题导致Nginx 403 Forbidden错误的解决方法</strong></p><ul><li>在<code>nginx.conf</code>头部加入一行 <code>user  root;</code></li><li>重启<code>nginx</code>再访问，就可以正常访问了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Nginx的启动、停止与重启&quot;&gt;&lt;a href=&quot;#Nginx的启动、停止与重启&quot; class=&quot;headerlink&quot; title=&quot;Nginx的启动、停止与重启&quot;&gt;&lt;/a&gt;Nginx的启动、停止与重启&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;建立软连接&lt;code&gt;Nginx
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Nginx" scheme="http://blog.poetries.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>python 3.5下xadmin的使用方法</title>
    <link href="http://blog.poetries.top/2017/05/05/python3-xadmin/"/>
    <id>http://blog.poetries.top/2017/05/05/python3-xadmin/</id>
    <published>2017-05-05T03:35:24.000Z</published>
    <updated>2017-09-17T12:12:07.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><ul><li>复制 xadmin 目录到你的项目</li><li><code>pip install httplib2 django-formtools django-crispy-forms</code><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setting.py</span></div><div class="line">INSTALLED_APPS = [</div><div class="line">    ...,</div><div class="line">    <span class="string">'xadmin'</span>,</div><div class="line">    <span class="string">'crispy_forms'</span>,</div><div class="line">]</div></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># urls.py</span></div><div class="line"><span class="keyword">import</span> xadmin</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, xadmin.site.urls)</div><div class="line">]</div></pre></td></tr></table></figure><h3 id="xadmin-「自带的」BUG-修复方法"><a href="#xadmin-「自带的」BUG-修复方法" class="headerlink" title="xadmin 「自带的」BUG 修复方法"></a>xadmin 「自带的」BUG 修复方法</h3><p>当我们重写了 Django 的 User 表后，xadmin 就会出现 bug。<br>master 分支里，我用 <code>users/models.py</code> 里的 <code>UserProfile</code> 重写了自带的 <code>auth_user</code> 表。<br>这里会出现两个 BUG：</p><ul><li>xadmin 无法管理重写后的User表</li><li>在 xadmin 后台页面点击右上角修改密码时，会报错</li></ul><p><a href="http://www.cnblogs.com/vincenshen/articles/6528344.html" target="_blank" rel="external">点击查看解决办法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装方法&quot;&gt;&lt;a href=&quot;#安装方法&quot; class=&quot;headerlink&quot; title=&quot;安装方法&quot;&gt;&lt;/a&gt;安装方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;复制 xadmin 目录到你的项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install httplib2 dj
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="python" scheme="http://blog.poetries.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ES6编码风格</title>
    <link href="http://blog.poetries.top/2017/04/14/es6-coding-style/"/>
    <id>http://blog.poetries.top/2017/04/14/es6-coding-style/</id>
    <published>2017-04-14T06:24:08.000Z</published>
    <updated>2017-09-17T12:12:07.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、块级作用域"><a href="#一、块级作用域" class="headerlink" title="一、块级作用域"></a>一、块级作用域</h2><hr><h3 id="1-1-let取代var"><a href="#1-1-let取代var" class="headerlink" title="1.1 let取代var"></a>1.1 let取代var</h3><hr><ul><li><code>ES6</code>提出了两个新的声明变量的命令：<code>let</code>和<code>const</code>。其中，<code>let</code>完全可以取代<code>var</code>，因为两者语义相同，而且<code>let</code>没有副作用</li><li><code>var</code>命令存在变量提升效用，<code>let</code>命令没有这个问题</li><li>建议不再使用<code>var</code>命令，而是使用<code>let</code>命令取代</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// ReferenceError</span></div><div class="line"><span class="keyword">let</span> x = <span class="string">'hello'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>上面代码如果使用<code>var</code>替代<code>let</code>，<code>console.log</code>那一行就不会报错，而是会输出<code>undefined</code>，因为变量声明提<br>升到代码块的头部。这违反了变量先声明后使用的原则</li></ul><h3 id="1-2-全局常量和线程安全"><a href="#1-2-全局常量和线程安全" class="headerlink" title="1.2 全局常量和线程安全"></a>1.2 全局常量和线程安全</h3><hr><ul><li>在<code>let</code>和<code>const</code>之间，建议优先使用<code>const</code>，尤其是在全局环境，不应该设置变量，只应设置常量。这符合函数式编程思想，有利于将来的分布式运算。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div></pre></td></tr></table></figure><ul><li><code>const</code>声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改<br>变量值所导致的错误</li><li>所有的函数都应该设置为常量</li><li>let表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全</li></ul><h3 id="1-3-严格模式"><a href="#1-3-严格模式" class="headerlink" title="1.3 严格模式"></a>1.3 严格模式</h3><hr><ul><li><code>V8</code>引擎只在严格模式之下，支持<code>let</code>和<code>const</code>。结合前两点，这实际上意味着，将来所有的编程都是针对严<br>格模式的。</li></ul><h2 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h2><hr><ul><li>静态字符串一律使用单引号，不使用双引号。动态字符串使用反引号</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> a = <span class="string">"foobar"</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="string">'foo'</span> + a + <span class="string">'bar'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = <span class="string">'foobar'</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="string">`foo<span class="subst">$&#123;a&#125;</span>bar`</span>;</div><div class="line"><span class="keyword">const</span> c = <span class="string">'foobar'</span>;</div></pre></td></tr></table></figure><h2 id="三、解构赋值"><a href="#三、解构赋值" class="headerlink" title="三、解构赋值"></a>三、解构赋值</h2><hr><ul><li>使用数组成员对变量赋值，优先使用解构赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</div><div class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> [first, second] = arr;</div></pre></td></tr></table></figure><ul><li>函数的参数如果是对象的成员，优先使用解构赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</div><div class="line"><span class="keyword">const</span> firstName = user.firstName;</div><div class="line"><span class="keyword">const</span> lastName = user.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line"><span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure><h2 id="四、对象"><a href="#四、对象" class="headerlink" title="四、对象"></a>四、对象</h2><hr><ul><li>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2, &#125;;</div><div class="line"><span class="keyword">const</span> b = &#123;</div><div class="line">k1: v1,</div><div class="line">k2: v2</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2 &#125;;</div><div class="line"><span class="keyword">const</span> b = &#123;</div><div class="line">k1: v1,</div><div class="line">k2: v2,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用<code>Object.assign</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> a = &#123;&#125;;</div><div class="line">a.x = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// if reshape unavoidable</span></div><div class="line"><span class="keyword">const</span> a = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.assign(a, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = &#123; <span class="attr">x</span>: <span class="literal">null</span> &#125;;</div><div class="line">a.x = <span class="number">3</span></div></pre></td></tr></table></figure><ul><li>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">id: <span class="number">5</span>,</div><div class="line">name: <span class="string">'San Francisco'</span>,</div><div class="line">&#125;;</div><div class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;<span class="string">'</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">// good</span></div><div class="line"><span class="string">const obj = &#123;</span></div><div class="line"><span class="string">id: 5,</span></div><div class="line"><span class="string">name: '</span>San Francisco<span class="string">',</span></div><div class="line"><span class="string">[getKey('</span>enabled<span class="string">')]: true,</span></div><div class="line"><span class="string">&#125;;</span></div></pre></td></tr></table></figure><ul><li>上面代码中，对象<code>obj</code>的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建<code>obj</code>的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了</li><li>另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">ar ref = <span class="string">'some value'</span>;</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line">ref: ref,</div><div class="line">value: <span class="number">1</span>,</div><div class="line">addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> atom.value + value;</div><div class="line">&#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line">ref,</div><div class="line">value: <span class="number">1</span>,</div><div class="line">addValue(value) &#123;</div><div class="line"><span class="keyword">return</span> atom.value + value;</div><div class="line">&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="五、数组"><a href="#五、数组" class="headerlink" title="五、数组"></a>五、数组</h2><hr><ul><li>使用扩展运算符<code>（...）</code>拷贝数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> len = items.length;</div><div class="line"><span class="keyword">const</span> itemsCopy = [];</div><div class="line"><span class="keyword">let</span> i;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> itemsCopy = [...items];</div></pre></td></tr></table></figure><ul><li>使用<code>Array.from</code>方法，将类似数组的对象转为数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</div><div class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</div></pre></td></tr></table></figure><h2 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h2><hr><ul><li>立即执行函数可以写成箭头函数的形式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet.'</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><ul><li>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</div><div class="line"><span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>箭头函数取代<code>Function.prototype.bind</code>，不应再用<code>self/_this/that</code>绑定 <code>this</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> self = <span class="keyword">this</span>;</div><div class="line"><span class="keyword">const</span> boundMethod = <span class="function"><span class="keyword">function</span>(<span class="params">...params</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> method.apply(self, params);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// acceptable</span></div><div class="line"><span class="keyword">const</span> boundMethod = method.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="keyword">const</span> boundMethod = <span class="function">(<span class="params">...params</span>) =&gt;</span> method.apply(<span class="keyword">this</span>, params);</div></pre></td></tr></table></figure><ul><li>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b, option = false </span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b, &#123; option = false &#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>不要在函数体内使用<code>arguments</code>变量，使用<code>rest</code>运算符<code>（...）</code>代替。因为<code>rest</code>运算符显式表明你想要获取参数，而且<code>arguments</code>是一个类似数组的对象，而<code>rest</code>运算符可以提供一个真正的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line"><span class="keyword">return</span> args.join(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> args.join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>使用默认值语法设置函数参数的默认值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">opts = opts || &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="七、Map结构"><a href="#七、Map结构" class="headerlink" title="七、Map结构"></a>七、Map结构</h2><hr><ul><li>注意区分<code>Object</code>和<code>Map</code>，只有模拟实体对象时，才使用<code>Object</code>。如果只是需要<code>key:value</code>的数据结构，使用<code>Map</code>。因为<code>Map</code>有内建的遍历机制</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(arr);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</div><div class="line"><span class="built_in">console</span>.log(key);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</div><div class="line"><span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</div><div class="line"><span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="八、Class"><a href="#八、Class" class="headerlink" title="八、Class"></a>八、Class</h2><hr><ul><li>总是用<code>class</code>，取代需要<code>prototype</code>操作。因为<code>class</code>的写法更简洁，更易于理解</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</div><div class="line"><span class="keyword">this</span>._queue = [...contents];</div><div class="line">&#125;</div><div class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line"><span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line"><span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</div><div class="line"><span class="keyword">constructor</span>(contents = []) &#123;</div><div class="line"><span class="keyword">this</span>._queue = [...contents];</div><div class="line">&#125;</div><div class="line">pop() &#123;</div><div class="line"><span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line"><span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line"><span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>使用<code>extends</code>实现继承，因为这样更简单，不会有破坏<code>instanceof</code>运算的危险</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'inherits'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</div><div class="line">Queue.apply(<span class="keyword">this</span>, contents);</div><div class="line">&#125;</div><div class="line">inherits(PeekableQueue, Queue);</div><div class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</div><div class="line">peek() &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="九、模块"><a href="#九、模块" class="headerlink" title="九、模块"></a>九、模块</h2><hr><ul><li><code>Module</code>语法是<code>JavaScript</code>模块的标准写法，坚持使用这种写法。使用<code>import</code>取代<code>require</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">'moduleA'</span>);</div><div class="line"><span class="keyword">const</span> func1 = moduleA.func1;</div><div class="line"><span class="keyword">const</span> func2 = moduleA.func2;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> &#123; func1, func2 &#125; <span class="keyword">from</span> <span class="string">'moduleA'</span>;</div></pre></td></tr></table></figure><ul><li>使用<code>export</code>取代<code>module.exports</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// commonJS的写法</span></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</div><div class="line"><span class="keyword">var</span> Breadcrumbs = React.createClass(&#123;</div><div class="line">render() &#123;</div><div class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">nav</span> /&gt;</span>;</span></div><div class="line"><span class="xml">&#125;</span></div><div class="line"><span class="xml">&#125;);</span></div><div class="line"><span class="xml">module.exports = Breadcrumbs;</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">// ES6的写法</span></div><div class="line"><span class="xml">import React from 'react';</span></div><div class="line"><span class="xml">const Breadcrumbs = React.createClass(&#123;</span></div><div class="line"><span class="xml">render() &#123;</span></div><div class="line"><span class="xml">return <span class="tag">&lt;<span class="name">nav</span> /&gt;</span>;</span></div><div class="line"><span class="xml">&#125;</span></div><div class="line"><span class="xml">&#125;);</span></div><div class="line"><span class="xml">export default Breadcrumbs</span></div></pre></td></tr></table></figure><ul><li>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myObject <span class="string">'./importModule'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> myObject <span class="keyword">from</span> <span class="string">'./importModule'</span>;</div></pre></td></tr></table></figure><ul><li>如果模块默认输出一个函数，函数名的首字母应该小写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</div></pre></td></tr></table></figure><ul><li>如果模块默认输出一个对象，对象名的首字母应该大写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> StyleGuide = &#123;</div><div class="line">es6: &#123;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> StyleGuide;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、块级作用域&quot;&gt;&lt;a href=&quot;#一、块级作用域&quot; class=&quot;headerlink&quot; title=&quot;一、块级作用域&quot;&gt;&lt;/a&gt;一、块级作用域&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-1-let取代var&quot;&gt;&lt;a href=&quot;#1-1-let取代var&quot; cl
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://blog.poetries.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>浅谈闭包</title>
    <link href="http://blog.poetries.top/2017/03/22/closure-summary/"/>
    <id>http://blog.poetries.top/2017/03/22/closure-summary/</id>
    <published>2017-03-22T06:24:08.000Z</published>
    <updated>2017-09-17T12:12:07.719Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>闭包的形成跟变量的作用域以及变量的生存周期密切相关</p></blockquote><h2 id="一、变量的作用域-是指变量的有效范围"><a href="#一、变量的作用域-是指变量的有效范围" class="headerlink" title="一、变量的作用域,是指变量的有效范围"></a>一、变量的作用域,是指变量的有效范围</h2><ul><li>当在函数中声明一个变量的时候,如果该变量前面没有带上关键字 <code>var</code>,这个变量就会成为全局变量 ,这当然是一种很容易造成命名冲突的做法。<br>另外一种情况是用 <code>var</code> 关键字在函数中声明变量,这时候的变量即是局部变量,只有在该函数内部才能访问到这个变量,在函数外面是访问不到的。</li></ul><p>例：变量的搜索是从内到外而非从外到 内的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> b=<span class="number">2</span>;</div><div class="line">    <span class="keyword">var</span> func2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">        <span class="keyword">var</span> c=<span class="number">3</span>;</div><div class="line">        <span class="built_in">console</span>.log ( b ); <span class="comment">// 输出:2 </span></div><div class="line">        <span class="built_in">console</span>.log ( a );<span class="comment">// 输出:1</span></div><div class="line">    &#125;</div><div class="line">    func2();</div><div class="line">    <span class="built_in">console</span>.log(c);<span class="comment">//输出:Uncaught ReferenceError: c is not defined</span></div><div class="line">&#125;; </div><div class="line">func1();</div></pre></td></tr></table></figure><h2 id="二、变量的生存周期"><a href="#二、变量的生存周期" class="headerlink" title="二、变量的生存周期"></a>二、变量的生存周期</h2><ul><li>对于全局变量来说,全局变量的生存周期当然是的永久,除非我们主动销毁这个全局变量。</li><li>而对于在函数内用<code>var</code>关键字声明的局部变量来说,当退出函数时,这些局部变量即失去了 它们的价值,它们都会随着函数的调用的结束而销毁</li></ul><p>例一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">        a++;</div><div class="line">        <span class="built_in">console</span>.log(a);</div><div class="line">    &#125; </div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> f=func();</div><div class="line">f();<span class="comment">// 输出:2 </span></div><div class="line">f();<span class="comment">// 输出:3</span></div><div class="line">f();<span class="comment">// 输出:4</span></div><div class="line">f();<span class="comment">// 输出:5</span></div></pre></td></tr></table></figure><ul><li>跟我们之前的结论相反,上面的例子在当退出函数后,局部变量<code>a</code> 并没有消失,而是似乎一直在某个地方 存活着。这是因为当执行 <code>var f = func();</code>时,<code>f</code> 返回了一个名函数的引用,它可以问到<code>func()</code> 被调用时产生的环境,而局部变量 <code>a</code> 一直处在这个环境里。既然外局部变量所在的环境还能被外 界访问,这个局部变量就有了不被销毁的理由。在这里生了一个闭包结构,局部变量的声明看起来被延续了。</li></ul><p>例二，假设页面上有 5 个 div 节点,我们通过循环来给每个 div绑定 onclick 事件,按照索引顺序,点击第 1 个 div 时弹出 0,点击第 2 个 div 时出 1,以此类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName( <span class="string">'div'</span> );</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=nodes.length;i&amp;lt;len;i++)&#123; </div><div class="line">    nodes[ i ].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(i); </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li>测试这段代码会发现,无论点击哪个 div,最后弹出的结果都是 5</li><li>这是因为 <code>div</code> 节点的 <code>onclick</code> 事件是被异步触发的,当事件被触发的时候,<code>for</code>循环早已结束,此时 i 的值已经是 <code>5</code>,</li><li>所以在 <code>div</code>的 <code>onclick</code> 事件函数中顺着作用域链从内到外查找变量 i 时,查找到的值总是 <code>5</code>。</li><li>解决方法是在闭包的帮助下,每次循环的<code>i</code> 值都封闭起来。当在事件函数中顺着作用域链从内到外查找变量 <code>i</code>时,会先找到被封闭在闭包环境中的<code>i,</code>如果有<code>5</code>个<code>div</code>,这里的<code>i</code>分别 是 <code>0,1,2,3,4</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=nodes.length;i&amp;lt;len;i++)&#123; </div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"> i </span>)</span>&#123;</div><div class="line">        nodes[ i ].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">            <span class="built_in">console</span>.log(i);</div><div class="line">        &#125; </div><div class="line">    &#125;)(i)</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="三、闭包的作用"><a href="#三、闭包的作用" class="headerlink" title="三、闭包的作用"></a>三、闭包的作用</h2><h3 id="1、封装变量—-闭包可以帮助一些不需要暴露在全局的变量封装成“私有变量”"><a href="#1、封装变量—-闭包可以帮助一些不需要暴露在全局的变量封装成“私有变量”" class="headerlink" title="1、封装变量—-闭包可以帮助一些不需要暴露在全局的变量封装成“私有变量”"></a>1、封装变量—-闭包可以帮助一些不需要暴露在全局的变量封装成“私有变量”</h3><ul><li>例一，计算乘积</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,l=<span class="built_in">arguments</span>.length;i&amp;lt;l;i++)&#123; </div><div class="line">        a = a * <span class="built_in">arguments</span>[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a; </div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="2、延续局部变量的寿命"><a href="#2、延续局部变量的寿命" class="headerlink" title="2、延续局部变量的寿命"></a>2、延续局部变量的寿命</h3><h2 id="四、闭包与内存泄漏"><a href="#四、闭包与内存泄漏" class="headerlink" title="四、闭包与内存泄漏"></a>四、闭包与内存泄漏</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(++i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> c = a();</div><div class="line">c();</div></pre></td></tr></table></figure><ul><li>首先有一个封闭的函数<code>a</code>（即自定义的一个<code>function a()</code>方法），该函数内部的变量<code>b</code>（局部变量/局部方法）外部无法直接调用；但如果把这个函数赋值给一个全部变量<code>c</code>时，</li><li>全局变量c就获取到了函数局部变量b的值，从而使局部变量<code>b</code>的值得到了保存，即延长了一个局部变量<code>b</code>的生命周期，除非主动销毁这个全局变量<code>c</code>。<br>此时，我们也就制造出来了一个“闭包”。简单说“闭包是指有权限访问另一个函数作用域的变量的函数”。</li><li>在这个过程中，因为局部变量b的声明周期延长，使得<code>Javascript</code>的垃圾回收机制不会收回函数<code>a</code>所占用的资源,因为函数a的局部变量<code>b</code>的执行需要依赖函数a中的变量。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;闭包的形成跟变量的作用域以及变量的生存周期密切相关&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、变量的作用域-是指变量的有效范围&quot;&gt;&lt;a href=&quot;#一、变量的作用域-是指变量的有效范围&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="闭包" scheme="http://blog.poetries.top/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习总结(一)</title>
    <link href="http://blog.poetries.top/2017/03/19/vue-summary-1/"/>
    <id>http://blog.poetries.top/2017/03/19/vue-summary-1/</id>
    <published>2017-03-19T04:24:08.000Z</published>
    <updated>2017-09-17T12:12:07.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-628462457f124619.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><ul><li><code>Vue</code>是一套构建用户界面的 渐进式框架。<code>Vue</code> 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。</li></ul><h2 id="二、Vue实例"><a href="#二、Vue实例" class="headerlink" title="二、Vue实例"></a>二、Vue实例</h2><p><strong>构造器</strong></p><ul><li>每个 <code>Vue.js</code> 应用都是通过构造函数 <code>Vue</code> 创建一个 <code>Vue</code> 的根实例 启动的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line"><span class="comment">// 选项</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>在实例化 <code>Vue</code> 时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项。全部的选项可以在 <code>API</code> 文档中查看</li></ul><p><strong>属性与方法</strong></p><ul><li>每个 <code>Vue</code>实例都会代理其<code>data</code> 对象里所有的属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">data: data</div><div class="line">&#125;)</div><div class="line">vm.a === data.a</div><div class="line"><span class="comment">// -&gt; true</span></div><div class="line"><span class="comment">// 设置属性也会影响到原始数据</span></div><div class="line">vm.a = <span class="number">2</span></div><div class="line">data.a <span class="comment">// -&gt; 2</span></div><div class="line"><span class="comment">// ... 反之亦然</span></div><div class="line">data.a = <span class="number">3</span></div><div class="line">vm.a <span class="comment">// -&gt; 3</span></div></pre></td></tr></table></figure><ul><li>除了 <code>data</code>属性， <code>Vue</code>实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 <code>$</code>，以便与代理的<code>data</code>属性区分。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">el: <span class="string">'#example'</span>,</div><div class="line">data: data</div><div class="line">&#125;)</div><div class="line">vm.$data === data</div><div class="line"><span class="comment">// -&gt; true</span></div><div class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line"><span class="comment">// -&gt; true</span></div><div class="line"><span class="comment">// $watch 是一个实例方法</span></div><div class="line">vm.$watch(<span class="string">'a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</div><div class="line"><span class="comment">// 这个回调将在 `vm.a` 改变后调用</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p><strong>实例生命周期</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">data: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</div><div class="line">created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// `this` 指向 vm 实例</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a is: '</span> + <span class="keyword">this</span>.a)</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// -&gt; "a is: 1"</span></div></pre></td></tr></table></figure><ul><li>也有一些其它的钩子，在实例生命周期的不同阶段调用，如 <code>mounted</code> 、 <code>updated</code> 、 <code>destroyed</code> 。钩子的 <code>this</code> 指向调用它的 <code>Vue</code> 实例。一些用户可能会问 <code>Vue.js</code> 是否有“控制器”的概念？答案是，没有。组件的自定义逻辑可以分布在这些钩子中</li></ul><p><strong>生命周期图示</strong></p><p><img src="./images/1489915053427.jpg" alt="生命周期图示" title="1489915053427"></p><h2 id="三、模板语法"><a href="#三、模板语法" class="headerlink" title="三、模板语法"></a>三、模板语法</h2><ul><li><p><code>Vue.js</code> 使用了基于 <code>HTML</code> 的模版语法，允许开发者声明式地将 <code>DOM</code> 绑定至底层 <code>Vue</code> 实例的数据。所有<code>Vue.js</code> 的模板都是合法的 <code>HTML</code> ，所以能被遵循规范的浏览器和 <code>HTML</code> 解析器解析。</p></li><li><p>在底层的实现上， <code>Vue</code>将模板编译成虚拟<code>DOM</code> 渲染函数。结合响应系统，在应用状态改变时， <code>Vue</code> 能够智能地计算出重新渲染组件的最小代价并应用到 <code>DOM</code> 操作上。</p></li></ul><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><p><strong>文本</strong></p><ul><li>数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure><ul><li><code>Mustache</code> 标签将会被替代为对应数据对象上 <code>msg</code> 属性的值。无论何时，绑定的数据对象上 <code>msg</code> 属性发生了改变，插值处的内容都会更新</li><li>通过使用 <code>v-once</code> 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>纯 HTML</strong></p><ul><li>双大括号会将数据解释为纯文本，而非 <code>HTML</code> 。为了输出真正的 <code>HTML</code>，你需要使用<code>v-html</code>指令：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>被插入的内容都会被当做 <code>HTML</code> —— 数据绑定会被忽略</li><li>你的站点上动态渲染的任意 <code>HTML</code> 可能会非常危险，因为它很容易导致 <code>XSS</code> 攻击。请只对可信内容使用<code>HTML</code> 插值，绝不要对用户提供的内容插值</li></ul><p><strong>属性</strong></p><ul><li>Mustache 不能在 <code>HTML</code> 属性中使用，应使用 <code>v-bind</code> 指令：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"dynamicId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>使用 JavaScript 表达式</strong></p><ul><li>对于所有的数据绑定， <code>Vue.js</code>都提供了完全的 <code>JavaScript</code>表达式支持。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; number + 1 &#125;&#125;&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</div><div class="line">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'list-' + id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析</li></ul><p><strong>过滤器</strong></p><ul><li><code>Vue.js</code> 允许你自定义过滤器，被用作一些常见的文本格式化。过滤器应该被添加在<code>mustache</code> 插值的尾部，由“管道符”指示：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; message | capitalize &#125;&#125;</div></pre></td></tr></table></figure><p><strong>指令</strong></p><ul><li>指令（<code>Directives</code>）是带有<code>v-</code>前缀的特殊属性。指令属性的值预期是单一 <code>JavaScript</code>表达式（除了<code>v-for</code> ，之后再讨论）</li><li>指令的职责就是当其表达式的值改变时相应地将某些行为应用到 DOM 上</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>Now you see me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>这里， <code>v-if</code> 指令将根据表达式 seen 的值的真假来移除/插入<code>&lt;p&gt;</code>元素</li></ul><p><strong>参数</strong></p><ul><li>一些指令能接受一个“参数”，在指令后以冒号指明。例如，<code>v-bind</code>指令被用来响应地更新 <code>HTML</code> 属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><ul><li><p>在这里 <code>href</code>是参数，告知<code>v-bind</code> 指令将该元素的 <code>href</code> 属性与表达式 <code>url</code>的值绑定</p></li><li><p>另一个例子是 <code>v-on</code> 指令，它用于监听 <code>DOM</code> 事件：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>修饰符</strong></p><ul><li>修饰符（Modifiers）是以半角句号<code>.</code>指明的特殊后缀，用于指出一个指令应该以特殊方式绑定</li><li>例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>缩写</strong></p><ul><li><code>v-</code> 前缀在模板中是作为一个标示 <code>Vue</code> 特殊属性的明显标识</li><li><p><code>Vue.js</code> 为两个最为常用的指令提供了特别的缩写</p></li><li><p><code>v-bind</code> 缩写</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><ul><li><code>v-on</code> 缩写</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="四、计算属性"><a href="#四、计算属性" class="headerlink" title="四、计算属性"></a>四、计算属性</h2><ul><li>在模板中绑定表达式是非常便利的，但是它们实际上只用于简单的操作。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span> &#123;&#123; message.split('').reverse().join('') &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>在这种情况下，模板不再简单和清晰。在实现反向显示 <code>message</code> 之前，你应该确认它。这个问题在你不止一次反向显示 <code>message</code> 的时候变得更加糟糕。</li><li>这就是为什么任何复杂逻辑，你都应当使用计算属性</li></ul><p><strong>基础例子</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123; </div><div class="line">el: <span class="string">'#example'</span>, <span class="attr">data</span>: &#123; <span class="attr">message</span>: <span class="string">'Hello'</span> &#125;, </div><div class="line">computed: &#123;</div><div class="line">  <span class="comment">//a computed getter </span></div><div class="line">reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">  <span class="comment">// `this` points to the vm instance </span></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">&#125; &#125;&#125;)</div></pre></td></tr></table></figure><ul><li><p>结果：</p><ul><li>Original message: “Hello”</li><li>Computed reversed message: “olleH”</li></ul></li><li><p>这里我们声明了一个计算属性 <code>reversedMessage</code> 。我们提供的函数将用作属性</p></li></ul><p><strong>计算缓存 vs Methods</strong></p><ul><li>你可能已经注意到我们可以通过调用表达式中的<code>method</code>来达到同样的效果：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Reversed message: "&#123;&#123; reverseMessage() &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// in component</span></div><div class="line">methods: &#123;</div><div class="line">reverseMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">'</span></div><div class="line"><span class="string">'</span>).reverse().join(<span class="string">''</span>) </div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure><ul><li><p>不经过计算属性，我们可以在 <code>method</code> 中定义一个相同的函数来替代它。对于最终的结果，两种方式确实是相同的。然而，不同的是计算属性是基于它的依赖缓存。计算属性只有在它的相关依赖发生改变时才会重新<br>取值。这就意味着只要 <code>message</code> 没有发生改变，多次访问<code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p></li><li><p>这也同样意味着如下计算属性将不会更新，因为 <code>Date.now()</code>不是响应式依赖：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">computed: &#123; <span class="attr">now</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Date</span>.now() &#125;&#125;</div></pre></td></tr></table></figure><ul><li><p>相比而言，每当重新渲染的时候，<code>method</code> 调用总会执行函数</p></li><li><p>我们为什么需要缓存？假设我们有一个重要的计算属性 <code>A</code> ，这个计算属性需要一个巨大的数组遍历和做大量的计算。然后我们可能有其他的计算属性依赖于 <code>A</code> 。如果没有缓存，我们将不可避免的多次执行 <code>A</code> 的 <code>getter</code>！如果你不希望有缓存，请用 <code>method</code> 替代</p></li></ul><p><strong>计算属性 vs Watched Property</strong></p><ul><li><code>Vue.js</code> 提供了一个方法<code>$watch</code> ，它用于观察 <code>Vue</code>实例上的数据变动</li></ul><p><strong>计算 setter</strong></p><ul><li>计算属性默认只有 <code>getter</code>，不过在需要时你也可以提供一个 <code>setter</code>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line">computed: &#123;</div><div class="line">fullName: &#123; </div><div class="line">   <span class="comment">// getter </span></div><div class="line">get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName </div><div class="line">&#125;, </div><div class="line"><span class="comment">// setter </span></div><div class="line">set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>) </div><div class="line"><span class="keyword">this</span>.firstName = names[<span class="number">0</span>] </div><div class="line"><span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>] </div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure><ul><li>现在在运行<code>vm.fullName = &#39;John Doe&#39;</code> 时， <code>setter</code>会被调用， <code>vm.firstName</code> 和<code>vm.lastName</code> 也会被对应更新</li></ul><p><strong>观察 Watchers</strong></p><ul><li>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的 <code>watcher</code> 。这是为什么 <code>Vue</code> 提供一个更通用的方法通过 <code>watch</code> 选项，来响应数据的变化。当你想要在数据变化响应时，执行异步操作或昂贵操作时，这是很有用的</li></ul><h2 id="五、Class与Style绑定"><a href="#五、Class与Style绑定" class="headerlink" title="五、Class与Style绑定"></a>五、Class与Style绑定</h2><h3 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h3><ul><li>数据绑定一个常见需求是操作元素的 <code>class</code> 列表和它的内联样式。因为它们都是属性 ，我们可以用 <code>v-bind</code>处理它们：只需要计算出表达式最终的字符串。不过，字符串拼接麻烦又易错。因此，在 <code>v-bind</code> 用于<code>class</code> 和 <code>style</code>时， <code>Vue.js</code> 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组</li></ul><h3 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h3><p><strong>对象语法</strong></p><ul><li>我们可以传给<code>v-bind:class</code> 一个对象，以动态地切换 <code>class</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>上面的语法表示<code>class active</code>的更新将取决于数据属性<code>isActive</code> 是否为真值</li><li>我们也可以在对象中传入更多属性用来动态切换多个<code>class</code>。此外， v-<code>bind:class</code> 指令可以与普通的<code>class</code> 属性共存。如下模板:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>如下 <code>data</code>:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data: &#123; <span class="attr">isActive</span>: <span class="literal">true</span>, <span class="attr">hasError</span>: <span class="literal">false</span>&#125;</div></pre></td></tr></table></figure><ul><li>渲染为:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li><p>当 <code>isActive</code> 或者 <code>hasError</code> 变化时，<code>class</code> 列表将相应地更新。例如，如果 <code>hasError</code>的值为<code>true</code> ， <code>class</code>列表将变为<code>&quot;static active text-danger&quot;</code></p></li><li><p>你也可以直接绑定数据里的一个对象</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data: &#123; <span class="attr">classObject</span>: &#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="string">'text-danger'</span>: <span class="literal">false</span> &#125;&#125;</div></pre></td></tr></table></figure><p><strong>数组语法</strong></p><ul><li>我们可以把一个数组传给 <code>v-bind:class</code> ，以应用一个 <code>class</code> 列表</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data: &#123; <span class="attr">activeClass</span>: <span class="string">'active'</span>, <span class="attr">errorClass</span>: <span class="string">'text-danger'</span>&#125;</div></pre></td></tr></table></figure><ul><li>渲染为:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>如果你也想根据条件切换列表中的 <code>class</code> ，可以用三元表达式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h3><p><strong>对象语法</strong></p><ul><li><code>v-bind:style</code> 的对象语法十分直观——看着非常像<code>CSS</code> ，其实它是一个 <code>JavaScript</code> 对象。 <code>CSS</code> 属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> </span></div><div class="line"><span class="tag"><span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data: &#123; <span class="attr">activeColor</span>: <span class="string">'red'</span>, <span class="attr">fontSize</span>: <span class="number">30</span>&#125;</div></pre></td></tr></table></figure><ul><li>直接绑定到一个样式对象通常更好，让模板更清晰</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data: &#123; <span class="attr">styleObject</span>: &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">fontSize</span>: <span class="string">'13px'</span> &#125;&#125;</div></pre></td></tr></table></figure><p><strong>数组语法</strong></p><ul><li><code>v-bind:style</code> 的数组语法可以将多个样式对象应用到一个元素上</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>自动添加前缀</strong></p><ul><li>当 <code>v-bind:style</code> 使用需要特定前缀的 <code>CSS</code> 属性时，如 <code>transform</code> ，<code>Vue.js</code>会自动侦测并添加相应的前缀</li></ul><h2 id="六、条件渲染"><a href="#六、条件渲染" class="headerlink" title="六、条件渲染"></a>六、条件渲染</h2><p><strong>v-if</strong></p><ul><li>在字符串模板中，如 <code>Handlebars</code>，我们得像这样写一个条件块</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Handlebars 模板 --&gt;</div><div class="line">&#123;&#123;#if ok&#125;&#125; &lt;h1&gt;Yes&lt;/h1&gt;&#123;&#123;/if&#125;&#125;</div></pre></td></tr></table></figure><ul><li>在 <code>Vue.js</code>，我们使用 <code>v-if</code>指令实现同样的功能</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>也可以用 <code>v-else</code>添加一个 <code>“else”</code>块</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>template v-if</strong></p><ul><li>因为 <code>v-if</code> 是一个指令，需要将它添加到一个元素上。但是如果我们想切换多个元素呢？此时我们可以把一个 <code>&lt;template&gt;</code> 元素当做包装元素，并在上面使用 <code>v-if</code> ，最终的渲染结果不会包含它</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>v-else</strong></p><ul><li><p>可以用 <code>v-else</code>指令给 <code>v-if</code>或 <code>v-show</code> 添加一个 <code>“else”</code> 块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"Math.random() &gt; 0.5"</span>&gt;</span> Sorry<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span> Not sorry<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p><code>v-else</code> 元素必须紧跟在<code>v-if</code>或 <code>v-show</code> 元素的后面——否则它不能被识别</p></li></ul><p><strong>v-show</strong></p><ul><li>另一个根据条件展示元素的选项是<code>v-show</code>指令。用法大体上一样</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure><ul><li><p>不同的是有 <code>v-show</code> 的元素会始终渲染并保持在 <code>DOM</code> 中。 <code>v-show</code>是简单的切换元素的 <code>CSS</code> 属性<code>display</code></p></li><li><p>注意 <code>v-show</code> 不支持 <code>&lt;template&gt;</code> 语法</p></li></ul><p><strong>v-if vs. v-show</strong></p><ul><li><code>v-if</code> 是真实的条件渲染，因为它会确保条件块在切换当中适当地销毁与重建条件块内的事件监听器和子组件</li><li><code>v-if</code>也是惰性的：如果在初始渲染时条件为假，则什么也不做</li><li>相比之下， <code>v-show</code> 简单得多——元素始终被编译并保留，只是简单地基于 <code>CSS</code> 切换</li><li>一般来说， <code>v-if</code>有更高的切换消耗而 <code>v-show</code> 有更高的初始渲染消耗</li><li>因此，如果需要频繁切换使用<code>v-show</code>较好，如果在运行时条件不大可能改变则使用<code>v-if</code>较好</li></ul><h2 id="七、列表渲染"><a href="#七、列表渲染" class="headerlink" title="七、列表渲染"></a>七、列表渲染</h2><p><strong>v-for</strong></p><ul><li>我们用 <code>v-for</code>指令根据一组数组的选项列表进行渲染。<code>v-for</code>指令需要以 <code>item in items</code> 形式的特殊语法， <code>items</code> 是源数据数组并且 <code>item</code> 是数组元素迭代的别名</li><li>在 <code>v-for</code> 块中，我们拥有对父作用域属性的完全访问权限。 <code>v-for</code> 还支持一个可选的第二个参数为当前项的索引</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"example-2"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span>&gt;</span> </div><div class="line">&#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125; </div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>你也可以用 <code>of</code>替代 <code>in</code>作为分隔符，因为它是最接近 <code>JavaScript</code> 迭代器的语法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item of items"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>Template v-for</strong></p><ul><li>如同 <code>v-if</code>模板，你也可以用带有 <code>v-for</code> 的 <code>&lt;template&gt;</code>标签来渲染多个元素块。例如：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p><strong>对象迭代 v-for</strong></p><ul><li>你也可以用<code>v-for</code> 通过一个对象的属性来迭代</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"repeat-object"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span> &#123;&#123; value &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">el: <span class="string">'#repeat-object'</span>, </div><div class="line">data: &#123; </div><div class="line">object: &#123;</div><div class="line">FirstName: <span class="string">'John'</span>, </div><div class="line">LastName: <span class="string">'Doe'</span>, <span class="attr">Age</span>: <span class="number">30</span></div><div class="line">&#125; </div><div class="line">&#125;&#125;)</div></pre></td></tr></table></figure><ul><li><p>你也可以提供第二个的参数为键名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in object"</span>&gt;</span> &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>第三个参数为索引</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in object"</span>&gt;</span></div><div class="line">&#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p><strong>整数迭代 v-for</strong></p><ul><li><code>v-for</code> 也可以取整数。在这种情况下，它将重复多次模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>结果： 1 2 3 4 5 6 7 8 9 10</li></ul><p><strong>组件 和 v-for</strong></p><ul><li><p>在自定义组件里，你可以像任何普通元素一样用 <code>v-for</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>然而他不能自动传递数据到组件里，因为组件有自己独立的作用域。为了传递迭代数据到组件里，我们要用<code>props</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span> </span></div><div class="line"><span class="tag"><span class="attr">v-bind:item</span>=<span class="string">"item"</span> <span class="attr">v-bind:index</span>=<span class="string">"index"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span>&gt;</div></pre></td></tr></table></figure><ul><li>不自动注入 <code>item</code>到组件里的原因是，因为这使得组件会紧密耦合到 <code>v-for</code>如何运作。在一些情况下，明确数据的来源可以使组件可重用。</li></ul><h2 id="八、事件处理器"><a href="#八、事件处理器" class="headerlink" title="八、事件处理器"></a>八、事件处理器</h2><p><strong>监听事件</strong></p><ul><li>可以用 <code>v-on</code> 指令监听 <code>DOM</code> 事件来触发一些 <code>JavaScript</code> 代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"counter += 1"</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123; </div><div class="line">el: <span class="string">'#example-1'</span>, </div><div class="line">data: &#123; </div><div class="line">counter: <span class="number">0</span> </div><div class="line">&#125;&#125;)</div></pre></td></tr></table></figure><p><strong>方法事件处理器</strong></p><ul><li>许多事件处理的逻辑都很复杂，所以直接把 <code>JavaScript</code> 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 可以接收一个定义的方法来调用</li></ul><p><strong>内联处理器方法</strong></p><ul><li>除了直接绑定到一个方法，也可以用内联 <code>JavaScript</code>语句</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-3"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say('hi')"</span>&gt;</span>Say hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say('what')"</span>&gt;</span>Say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">el: <span class="string">'#example-3'</span>, </div><div class="line">methods: &#123; </div><div class="line">say: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123; </div><div class="line">alert(message) </div><div class="line">&#125;</div><div class="line">&#125;&#125;)</div></pre></td></tr></table></figure><ul><li>有时也需要在内联语句处理器中访问原生 <code>DOM</code> 事件。可以用特殊变量 <code>$event</code>把它传入方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> </span></div><div class="line"><span class="tag"><span class="attr">v-on:click</span>=<span class="string">"warn('Form cannot be submitted yet.', $event)"</span>&gt;</span></div><div class="line">Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">warn: <span class="function"><span class="keyword">function</span> (<span class="params">message, event</span>) </span>&#123;</div><div class="line"><span class="comment">// 现在我们可以访问原生事件对象 </span></div><div class="line"><span class="keyword">if</span>(event) &#123;</div><div class="line">event.preventDefault() </div><div class="line">alert(message) </div><div class="line">&#125;</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure><p><strong>事件修饰符</strong></p><ul><li>在事件处理程序中调用<code>event.preventDefault()</code>或<code>event.stopPropagation()</code>是非常常见的需求。尽管我们可以在<code>methods</code> 中轻松实现这点，但更好的方式是：<code>methods</code> 只有纯粹的数据逻辑，而不是去处理<code>DOM</code> 事件细节</li><li>为了解决这个问题， <code>Vue.js</code> 为 <code>v-on</code>提供了 事件修饰符。通过由点(<code>.</code>)表示的指令后缀来调用修饰符</li><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用时间捕获模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>按键修饰符</strong></p><ul><li>在监听键盘事件时，我们经常需要监测常见的键值。 <code>Vue</code>允许为 <code>v-on</code>在监听键盘事件时添加按键修饰符：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span>&gt;</span></div></pre></td></tr></table></figure><ul><li><p>记住所有的 <code>keyCode</code>比较困难，所以 <code>Vue</code>为最常用的按键提供了别名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>全部的按键别名：</p><ul><li><code>enter</code></li><li><code>tab</code></li><li><code>delete</code> (捕获 “删除” 和 “退格” 键)</li><li><code>esc</code></li><li><code>space</code></li><li><code>up</code></li><li><code>down</code></li><li><code>left</code></li><li><code>right</code></li></ul></li></ul><p><strong>为什么在 HTML 中监听事件?</strong></p><ul><li><p>你可能注意到这种事件监听的方式违背了关注点分离（separation of concern）传统理念。不必担心，因为所有的 <code>Vue.js</code>事件处理方法和表达式都严格绑定在当前视图的 <code>ViewModel</code>上，它不会导致任何维护上的困难。</p></li><li><p>实际上，使用 <code>v-on</code>有几个好处</p><ul><li>扫一眼<code>HTML</code> 模板便能轻松定位在 <code>JavaScript</code>代码里对应的方法</li><li>因为你无须在 <code>JavaScript</code>里手动绑定事件，你的 <code>ViewModel</code>代码可以是非常纯粹的逻辑，和 <code>DOM</code> 完全解耦，更易于测试。</li><li>当一个 <code>ViewModel</code>被销毁时，所有的事件处理器都会自动被删除。你无须担心如何自己清理它们。</li></ul></li></ul><h2 id="九、表单控制绑定"><a href="#九、表单控制绑定" class="headerlink" title="九、表单控制绑定"></a>九、表单控制绑定</h2><p><strong>基础用法</strong></p><ul><li>你可以用 <code>v-model</code>指令在表单控件元素上创建双向数据绑定</li><li>它会根据控件类型自动选取正确的方法来更新元素。</li><li>尽管有些神奇，但 <code>v-model</code>本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。</li><li><code>v-model</code> 并不关心表单控件初始化所生成的值。因为它会选择<code>Vue</code>实例数据来作为具体的值。</li></ul><p><strong>文本</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>复选框</strong></p><ul><li>单个勾选框，逻辑值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>多个勾选框，绑定到同一个数组</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"Jack"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"jack"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"john"</span> <span class="attr">value</span>=<span class="string">"John"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"john"</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"mike"</span> <span class="attr">value</span>=<span class="string">"Mike"</span> <span class="attr">v-model</span>=<span class="string">"checkedN</span></span></div><div class="line"><span class="tag"><span class="string">ames"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mike"</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'...'</span>, <span class="attr">data</span>: &#123; <span class="attr">checkedNames</span>: [] &#125;&#125;)</div></pre></td></tr></table></figure><h2 id="十、组件"><a href="#十、组件" class="headerlink" title="十、组件"></a>十、组件</h2><h3 id="什么是组件？"><a href="#什么是组件？" class="headerlink" title="什么是组件？"></a>什么是组件？</h3><ul><li>组件（Component）是 <code>Vue.js</code> 最强大的功能之一。组件可以扩展<code>HTML</code>元素，封装可重用的代码。在较高层面上，组件是自定义元素，<code>Vue.js</code> 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 <code>HTML</code> 元<br>素的形式，以<code>is</code> 特性扩展</li></ul><h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><p><strong>注册</strong></p><ul><li>之前说过，我们可以通过以下方式创建一个 <code>Vue</code>实例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#some-element'</span>, <span class="comment">// 选项&#125;)</span></div></pre></td></tr></table></figure><ul><li><p>要注册一个全局组件，你可以使用 <code>Vue.component(tagName, options) 。</code>例如：<code>Vue.component(&#39;my-component&#39;, { // 选项})</code></p></li><li><p>组件在注册之后，便可以在父实例的模块中以自定义元素 <code>&lt;my-component&gt;&lt;/my-component&gt;</code> 的形式使用。要确保在初始化根实例 之前 注册了组件：<code>&lt;div id=&quot;example&quot;&gt; &lt;my-component&gt;&lt;/my-component&gt;&lt;/div&gt;</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注册</span></div><div class="line">Vue.component(<span class="string">'my-component'</span>, </div><div class="line">&#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">//创建根实例</span></div><div class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#example'</span>&#125;)</div></pre></td></tr></table></figure><ul><li>渲染为：<code>&lt;div id=&quot;example&quot;&gt; &lt;div&gt;A custom component!&lt;/div&gt;&lt;/div&gt;</code></li></ul><p><strong>局部注册</strong></p><ul><li>不必在全局注册每个组件。通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用</li></ul><p><strong>构成组件</strong></p><ul><li>组件意味着协同工作，通常父子组件会是这样的关系：组件 A 在它的模版中使用了组件 B 。它们之间必然需要相互通信：父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件。然而，在一个良<br>好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性</li><li>在 <code>Vue.js</code>中，父子组件的关系可以总结为 <code>props down</code>, <code>events up</code> 。父组件通过 <code>props</code> 向下传递数据给子组件，子组件通过 <code>events</code>给父组件发送消息。看看它们是怎么工作的</li></ul><p><img src="./images/1489926033814.jpg" alt="enter description here" title="1489926033814"></p><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p><strong>使用Props传递数据</strong></p><ul><li>组件实例的作用域是孤立的。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用<code>props</code>把数据传给子组件。</li><li><code>prop</code>是父组件用来传递数据的一个自定义属性。子组件需要显式地用 <code>props</code> 选项 声明 <code>“prop”：</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'child'</span>, &#123; </div><div class="line"><span class="comment">// 声明 props</span></div><div class="line">props: [<span class="string">'message'</span>],</div><div class="line"><span class="comment">// 就像 data 一样，prop 可以用在模板内</span></div><div class="line"><span class="comment">// 同样也可以在 vm 实例中像 “this.message” 这样使用</span></div><div class="line">template: <span class="string">'&lt;span&gt;&#123;&#123; message&#125;&#125;&lt;/span&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">'</span>&#125;)</div></pre></td></tr></table></figure><ul><li>然后向它传入一个普通字符串<code>&lt;child message=&quot;hello!&quot;&gt;&lt;/child&gt;</code></li><li>结果：hello!</li></ul><p><strong>动态 Props</strong></p><ul><li>类似于用<code>v-bind</code> 绑定 <code>HTML</code> 特性到一个表达式，也可以用 <code>v-bind</code> 绑定动态 <code>props</code>到父组件的数据。每当父组件的数据变化时，也会传导给子组件：</li></ul><p><strong>单向数据流</strong></p><ul><li><code>prop</code>是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解</li><li>另外，每次父组件更新时，子组件的所有 <code>prop</code>都会更新为最新值。这意味着你不应该在子组件内部改变<code>prop</code> 。如果你这么做了，<code>Vue</code> 会在控制台给出警告</li></ul><h2 id="十一、附录"><a href="#十一、附录" class="headerlink" title="十一、附录"></a>十一、附录</h2><h3 id="附录一-MVC、MVP、MVVM模式对比"><a href="#附录一-MVC、MVP、MVVM模式对比" class="headerlink" title="附录一 MVC、MVP、MVVM模式对比"></a>附录一 MVC、MVP、MVVM模式对比</h3><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><hr><h5 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h5><hr><ul><li>MVC是一种模式，它将应用分为3个部分：数据（模型）、表现层（视图）、用户交互层（控制器）</li><li>一个事件的处理大概是这样<ul><li>用户和应用产生交互</li><li>控制器的事件处理器被触发</li><li>控制器从模型中请求数据，并将其交给视图</li><li>视图将数据呈现给用户</li></ul></li></ul><h5 id="模型（数据保存）"><a href="#模型（数据保存）" class="headerlink" title="模型（数据保存）"></a>模型（数据保存）</h5><hr><ul><li>模型用来存放用户的所有数据对象。比如有一个user模型，用来存放用户列表、他们的属性以及所有和模型有关的逻辑</li><li>模型不必知晓视图和控制器的细节，模型只需包含数据以及直接和这些数据相关的逻辑</li></ul><h5 id="视图（用户界面）"><a href="#视图（用户界面）" class="headerlink" title="视图（用户界面）"></a>视图（用户界面）</h5><hr><ul><li>视图是呈现给用户的，用户与之产生交互。在JavaScript应用中，视图大都是由HTML、css、JavaScript模板组成的</li></ul><h5 id="控制器（业务逻辑）"><a href="#控制器（业务逻辑）" class="headerlink" title="控制器（业务逻辑）"></a>控制器（业务逻辑）</h5><hr><ul><li>控制器是模型和视图之间的纽带。控制器从视图获得事件和输入，对它们进行进行处理，并相应的更新视图。</li><li>当页面加载时，控制器会给视图添加事件监听，比如监听表单提交或按钮点击。然后当用户和你的应用产生交互时，控制器中的事件触发器就开始工作了</li></ul><h5 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h5><hr><ul><li><code>Controller</code> 监听 <code>Model</code> 变化，<code>Model</code> 一变，<code>Controller</code> 就会去更新<code>View</code>。</li><li><p><code>Controller</code> 监听用户交互，用户点了提交或修改按钮，Controller 就要去更新 Model</p></li><li><p><code>View</code> 传送指令到 <code>Controller</code></p></li><li><code>Controller</code> 完成业务逻辑后，要求 <code>Model</code> 改变状态</li><li><code>Model</code> 将新的数据发送到 <code>View</code>，用户得到反馈</li></ul><p>各部分之间的通信方式</p><p><img src="http://image.beekka.com/blog/2015/bg2015020105.png" alt=""></p><h4 id="互动模式"><a href="#互动模式" class="headerlink" title="互动模式"></a>互动模式</h4><hr><ul><li>接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller</li></ul><p><img src="http://image.beekka.com/blog/2015/bg2015020106.png" alt=""></p><ul><li>另一种是直接通过controller接受指令</li></ul><p><img src="http://image.beekka.com/blog/2015/bg2015020107.png" alt=""></p><h4 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h4><hr><ul><li><code>MVP</code> 模式将 <code>Controller 改名为</code>Presenter`，同时改变了通信方向</li></ul><p><img src="http://image.beekka.com/blog/2015/bg2015020109.png" alt=""></p><ul><li>各部分之间的通信，都是双向的。</li><li><code>View</code> 与<code>Model</code> 不发生联系，都通过 <code>Presenter</code> 传递。</li><li><code>View</code> 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里</li></ul><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><hr><ul><li><code>MVVM</code> 模式将 <code>Presenter</code> 改名为 <code>ViewModel</code>，基本上与 <code>MVP</code> 模式完全一致</li><li>唯一的区别是，它采用双向绑定（data-binding）：<code>View</code>的变动，自动反映在 <code>ViewModel</code>，反之亦然</li></ul><p><img src="http://image.beekka.com/blog/2015/bg2015020110.png" alt=""></p><h3 id="附录二-vue与其他框架的对比"><a href="#附录二-vue与其他框架的对比" class="headerlink" title="附录二 vue与其他框架的对比"></a>附录二 vue与其他框架的对比</h3><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><ul><li><code>React</code> 和 <code>Vue</code> 有许多相似之处，它们都有<ul><li>使用 <code>Virtual DOM</code></li><li>提供了响应式（Reactive）和组件化（Composable）的视图组件。</li><li>将注意力集中保持在核心库，伴随于此，有配套的路由和负责处理全局状态管理的库</li></ul></li></ul><h4 id="angular1"><a href="#angular1" class="headerlink" title="angular1"></a>angular1</h4><ul><li><code>Vue</code> 的一些语法和 <code>Angular</code>的很相似（例如 <code>v-if vs ng-if</code>）。因为<code>Angular</code>是 <code>Vue</code>早期开发的灵感来源。然而，Angular 中存在的许多问题，在 Vue 中已经得到解决</li></ul><p><strong>复杂性</strong></p><ul><li>在 <code>API</code> 与设计两方面上<code>Vue.js</code>都比 <code>Angular 1</code> 简单得多，因此你可以快速地掌握它的全部特性并投入开发。</li></ul><p><strong>灵活性和模块化</strong></p><ul><li><code>Vue.js</code> 是一个更加灵活开放的解决方案。它允许你以希望的方式组织应用程序，而不是在任何时候都必须遵循 <code>Angular 1</code>制定的规则，这让<code>Vue</code>能适用于各种项目。我们知道把决定权交给你是非常必要的</li></ul><p><strong>数据绑定</strong></p><ul><li><code>Angular 1</code>使用双向绑定，<code>Vue</code> 在不同组件间强制使用单向数据流。这使应用中的数据流更加清晰易懂。</li></ul><p><strong>指令与组件</strong></p><ul><li>在 <code>Vue</code> 中指令和组件分得更清晰。指令只封装 <code>DOM</code> 操作，而组件代表一个自给自足的独立单元 —— 有自己的视图和数据逻辑。在 <code>Angular</code> 中两者有不少相混的地方</li></ul><p><strong>性能</strong></p><ul><li><code>Vue</code> 有更好的性能，并且非常非常容易优化，因为它不使用脏检查</li><li>在 <code>Angular 1</code> 中，当 <code>watchers</code> 越来越多时会变得越来越慢，因为作用域内的每一次变化，所有 <code>watchers</code>都要重新计算。并且，如果一些<code>watchers</code>触发另一个更新，脏检查循环（digest cycle）可能要运行多次。Angular 用户常常要使用深奥的技术，以解决脏检查循环的问题。有时没有简单的办法来优化有大量 <code>watchers</code>的作用域</li><li><code>Vue</code> 则根本没有这个问题，因为它使用基于依赖追踪的观察系统并且异步队列更新，所有的数据变化都是独立触发，除非它们之间有明确的依赖关系</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/148059
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题整理</title>
    <link href="http://blog.poetries.top/2017/03/12/front-end-interview-summary/"/>
    <id>http://blog.poetries.top/2017/03/12/front-end-interview-summary/</id>
    <published>2017-03-12T14:24:08.000Z</published>
    <updated>2017-09-17T12:12:07.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="HTML，-HTTP，web综合问题"><a href="#HTML，-HTTP，web综合问题" class="headerlink" title="$HTML， HTTP，web综合问题"></a>$HTML， HTTP，web综合问题</h3><ul><li>1、前端需要注意哪些<code>SEO</code></li><li>2、<code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</li><li>3、<code>HTTP</code>的几种请求方法用途</li><li>4、从浏览器地址栏输入<code>url</code>到显示页面的步骤</li><li>5、如何进行网站性能优化</li><li>6、HTTP状态码及其含义</li><li>7、语义化的理解</li><li>8、介绍一下你对浏览器内核的理解</li><li>9、<code>html5</code>有哪些新特性、移除了那些元素？</li><li>10、<code>HTML5</code>的离线储存怎么使用，工作原理能不能解释一下？</li><li>11、浏览器是怎么对<code>HTML5</code>的离线储存资源进行管理和加载的呢</li><li>12、请描述一下 <code>cookies</code>，<code>sessionStorage</code> 和 <code>localStorage</code> 的区别</li><li>13、<code>iframe</code>有那些缺点？</li><li>14、<code>WEB</code>标准以及W3C标准是什么?</li><li>15、<code>xhtml</code>和<code>html</code>有什么区别?</li><li>16、<code>Doctype</code>作用? 严格模式与混杂模式如何区分？它们有何意义?</li><li>17、行内元素有哪些？块级元素有哪些？ 空(<code>void</code>)元素有那些？行内元素和块级元素有什么区别？</li><li>18、<code>HTML</code>全局属性(<code>global attribute</code>)有哪些</li><li>19、<code>Canvas</code>和<code>SVG</code>有什么区别？</li><li>20、<code>HTML5</code> 为什么只需要写 <code>&lt;!DOCTYPE HTML&gt;？</code></li><li>21、如何在页面上实现一个圆形的可点击区域？</li><li>22、网页验证码是干嘛的，是为了解决什么安全问题</li></ul><h3 id="CSS部分"><a href="#CSS部分" class="headerlink" title="$CSS部分"></a>$CSS部分</h3><ul><li>1、<code>css sprite</code>是什么,有什么优缺点</li><li>2、<code>display: none;</code>与<code>visibility: hidden</code>;的区别</li><li>3、<code>link</code>与<code>@import</code>的区别</li><li>4、什么是<code>FOUC?</code>如何避免</li><li>5、如何创建块级格式化上下文(<code>block formatting context</code>),<code>BFC</code>有什么用</li><li>7、清除浮动的几种方式，各自的优缺点</li><li>8、为什么要初始化<code>CSS</code>样式?</li><li>9、<code>css3</code>有哪些新特性</li><li>10、<code>display</code>有哪些值？说明他们的作用</li><li>11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</li><li>12、<code>CSS</code>优先级算法如何计算？</li><li>13、对<code>BFC</code>规范的理解？</li><li>14、谈谈浮动和清除浮动</li><li>15、<code>position</code>的值， <code>relative</code>和absolute`定位原点是</li><li>16、<code>display:inline-block</code> 什么时候不会显示间隙？(携程)</li><li>17、<code>PNG,GIF,JPG</code>的区别及如何选</li><li>18、行内元素<code>float:left</code>后是否变为块级元素？</li><li>19、在网页中的应该使用奇数还是偶数的字体？为什么呢？</li><li>20、<code>::before</code> 和 <code>:after</code>中双冒号和单冒号有什么区别？解释一下这<code>2</code>个伪元素的作用</li><li>21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</li><li>22、<code>CSS</code>合并方法</li><li>23、<code>CSS</code>不同选择器的权重(<code>CSS</code>层叠的规则)</li><li>24、列出你所知道可以改变页面布局的属性</li><li>25、<code>CSS</code>在性能优化方面的实践</li><li>26、<code>CSS3</code>动画（简单动画的实现，如旋转等）</li><li>27、<code>base64</code>的原理及优缺点</li></ul><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="$JavaScript"></a>$JavaScript</h3><ul><li>1、闭包</li><li>2、说说你对作用域链的理解</li><li>3、<code>JavaScript</code>原型，原型链 ? 有什么特点？</li><li>4、请解释什么是事件代理</li><li>5、<code>Javascript</code>如何实现继承？</li><li>6、谈谈<code>This</code>对象的理解</li><li>7、事件模型</li><li>8、<code>new</code>操作符具体干了什么呢?</li><li>9、<code>Ajax</code>原理</li><li>11、模块化开发怎么做？</li><li>12、异步加载<code>JS</code>的方式有哪些？</li><li>13、那些操作会造成内存泄漏？</li><li>14、<code>XML</code>和<code>JSON</code>的区别？</li><li>15、谈谈你对<code>webpack</code>的看法</li><li>17、常见<code>web</code>安全及防护原理</li><li>18、用过哪些设计模式？</li><li>19、为什么要有同源限制？</li><li>20、<code>offsetWidth/offsetHeight</code>,<code>clientWidth/clientHeight</code>与<code>scrollWidth/scrollHeight</code>的区别</li><li>21、<code>javascript</code>有哪些方法定义对象</li><li>22、常见兼容性问题？</li><li>22、说说你对<code>promise</code>的了解</li><li>23、你觉得<code>jQuery</code>源码有哪些写的好的地方</li><li>25、<code>Node</code>的应用场景</li><li>26、谈谈你对<code>AMD</code>、<code>CMD</code>的理解</li><li>27、那些操作会造成内存泄漏？</li><li>28、<code>web</code>开发中会话跟踪的方法有哪些</li><li>29、介绍<code>js</code>的基本数据类型</li><li>30、介绍<code>js</code>有哪些内置对象？</li><li>31、说几条写<code>JavaScript</code>的基本规范？</li><li>32、<code>JavaScript</code>有几种类型的值？，你能画一下他们的内存图吗？</li><li>33、<code>javascript</code>创建对象的几种方式？</li><li>34、<code>eval</code>是做什么的？</li><li>35、<code>null，undefined</code> 的区别？</li><li>36、<code>[“1”, “2”, “3”].map(parseInt)</code> 答案是多少？</li><li>37、<code>javascript</code> 代码中的<code>”use strict”</code>;是什么意思 ? 使用它区别是什么？</li><li>38、<code>JSON</code>的了解？</li><li>39、js延迟加载的方式有哪些？</li><li>40、同步和异步的区别?</li><li>41、渐进增强和优雅降级</li><li>42、<code>defer</code>和<code>async</code></li><li>43、说说严格模式的限制</li><li>44、<code>attribute</code>和<code>property</code>的区别是什么？</li><li>45、谈谈你对<code>ES6</code>的理解</li><li>46、<code>ECMAScript6</code> 怎么写<code>class</code>么，为什么会出现<code>class</code>这种东西?</li><li>47、什么是面向对象编程及面向过程编程，它们的异同和优缺点</li><li>48、从你自己的理解来看，你是如何理解面向对象编程的，它解决了什么问题，有什么作用</li><li>49、对web标准、可用性、可访问性的理解</li></ul><h3 id="编程题"><a href="#编程题" class="headerlink" title="$编程题"></a>$编程题</h3><ul><li>1、写一个通用的事件侦听器函数</li><li>2、如何判断一个对象是否为数组</li><li>3、冒泡排序</li><li>4、快速排序</li><li>5、编写一个方法 求一个字符串的字节长度</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="$其他"></a>$其他</h3><ul><li>1、谈谈你对重构的理解</li><li>2、什么样的前端代码是好的</li><li>3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</li><li>4、你觉得前端工程的价值体现在哪</li><li>5、平时如何管理你的项目？</li></ul><h3 id="人事面"><a href="#人事面" class="headerlink" title="人事面"></a>人事面</h3><ul><li>面试完你还有什么问题要问的吗</li><li>你有什么爱好?</li><li>你最大的优点和缺点是什么?</li><li>你为什么会选择这个行业，职位?</li><li>你觉得你适合从事这个岗位吗?</li><li>你有什么职业规划?</li><li>你对工资有什么要求?</li><li>如何看待前端开发？</li><li>未来三到五年的规划是怎样的？</li></ul><h3 id="常问"><a href="#常问" class="headerlink" title="常问"></a>常问</h3><ul><li>自我介绍</li><li>你的项目中技术难点是什么？遇到了什么问题？你是怎么解决的？</li><li>你认为哪个项目做得最好？</li><li>最近在看哪些前端方面的书？</li><li>平时是如何学习前端开发的？</li><li>你最有成就感的一件事</li><li>你是怎么学习前端的</li></ul><h2 id="HTML，-HTTP，web综合问题-1"><a href="#HTML，-HTTP，web综合问题-1" class="headerlink" title="$HTML， HTTP，web综合问题"></a>$HTML， HTTP，web综合问题</h2><h3 id="1、前端需要注意哪些SEO"><a href="#1、前端需要注意哪些SEO" class="headerlink" title="1、前端需要注意哪些SEO"></a>1、前端需要注意哪些SEO</h3><ul><li>合理的<code>title</code>、<code>description</code>、<code>keywords</code>：搜索对着三项的权重逐个减小，title值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面<code>title</code>要有所不同；<code>description</code>把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面<code>description</code>有所不同；<code>keywords</code>列举出重要关键词即可</li><li>语义化的<code>HTML</code>代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</li><li>重要内容<code>HTML</code>代码放在最前：搜索引擎抓取<code>HTML</code>顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li><li>重要内容不要用<code>js</code>输出：爬虫不会执行js获取内容</li><li>少用<code>iframe</code>：搜索引擎不会抓取<code>iframe</code>中的内容</li><li>非装饰性图片必须加<code>alt</code></li><li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li></ul><h3 id="2、-lt-img-gt-的title和alt有什么区别"><a href="#2、-lt-img-gt-的title和alt有什么区别" class="headerlink" title="2、&lt;img&gt;的title和alt有什么区别"></a>2、<code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</h3><ul><li>通常当鼠标滑动到元素上的时候显示</li><li><code>alt</code>是<code>&lt;img&gt;</code>的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</li></ul><h3 id="3、HTTP的几种请求方法用途"><a href="#3、HTTP的几种请求方法用途" class="headerlink" title="3、HTTP的几种请求方法用途"></a>3、HTTP的几种请求方法用途</h3><ul><li><p>1、<code>GET</code>方法</p><ul><li>发送一个请求来取得服务器上的某一资源</li></ul></li><li><p>2、<code>POST</code>方法</p><ul><li>向<code>URL</code>指定的资源提交数据或附加新的数据</li></ul></li><li><p>3、<code>PUT</code>方法</p><ul><li>跟<code>POST</code>方法很像，也是想服务器提交数据。但是，它们之间有不同。PUT指定了资源在服务器上的位置，而<code>POST</code>没有</li></ul></li><li><p>4、<code>HEAD</code>方法</p><ul><li>只请求页面的首部</li></ul></li><li><p>5、<code>DELETE</code>方法</p><ul><li>删除服务器上的某资源</li></ul></li><li><p>6、<code>OPTIONS</code>方法</p><ul><li>它用于获取当前<code>URL</code>所支持的方法。如果请求成功，会有一个<code>Allow</code>的头包含类似<code>“GET,POST”</code>这样的信息</li></ul></li><li><p>7、<code>TRACE</code>方法</p><ul><li><code>TRACE</code>方法被用于激发一个远程的，应用层的请求消息回路</li></ul></li><li><p>8、<code>CONNECT</code>方法</p><ul><li>把请求连接转换到透明的<code>TCP/IP</code>通道</li></ul></li></ul><h3 id="4、从浏览器地址栏输入url到显示页面的步骤"><a href="#4、从浏览器地址栏输入url到显示页面的步骤" class="headerlink" title="4、从浏览器地址栏输入url到显示页面的步骤"></a>4、从浏览器地址栏输入url到显示页面的步骤</h3><ul><li>浏览器根据请求的<code>URL</code>交给<code>DNS</code>域名解析，找到真实<code>IP</code>，向服务器发起请求；</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（<code>HTML、JS、CSS</code>、图象等）；</li><li>浏览器对加载到的资源（<code>HTML、JS、CSS</code>等）进行语法解析，建立相应的内部数据结构（如<code>HTML</code>的<code>DOM</code>）；</li><li>载入解析到的资源文件，渲染页面，完成。</li></ul><h3 id="5、如何进行网站性能优化"><a href="#5、如何进行网站性能优化" class="headerlink" title="5、如何进行网站性能优化"></a>5、如何进行网站性能优化</h3><ul><li><p><code>content</code>方面</p><ol><li>减少<code>HTTP</code>请求：合并文件、<code>CSS</code>精灵、<code>inline Image</code></li><li>减少<code>DNS</code>查询：<code>DNS</code>缓存、将资源分布到恰当数量的主机名</li><li>减少<code>DOM</code>元素数量</li></ol></li><li><p><code>Server</code>方面</p><ol><li>使用<code>CDN</code></li><li>配置<code>ETag</code></li><li>对组件使用<code>Gzip</code>压缩</li></ol></li><li><p><code>Cookie</code>方面</p><ol><li>减小<code>cookie</code>大小</li></ol></li><li><p><code>css</code>方面</p><ol><li>将样式表放到页面顶部</li><li>不使用<code>CSS</code>表达式</li><li>使用<code>&lt;link&gt;</code>不使用<code>@import</code></li></ol></li><li><p><code>Javascript</code>方面</p><ol><li>将脚本放到页面底部</li><li>将<code>javascript</code>和<code>css</code>从外部引入</li><li>压缩<code>javascript</code>和<code>css</code></li><li>删除不需要的脚本</li><li>减少<code>DOM</code>访问</li></ol></li><li><p>图片方面</p><ol><li>优化图片：根据实际颜色需要选择色深、压缩</li><li>优化<code>css</code>精灵</li><li>不要在<code>HTML</code>中拉伸图片</li></ol></li></ul><h3 id="6、HTTP状态码及其含义"><a href="#6、HTTP状态码及其含义" class="headerlink" title="6、HTTP状态码及其含义"></a>6、HTTP状态码及其含义</h3><ul><li><code>1XX</code>：信息状态码<ul><li><code>100  Continue</code>   继续，一般在发送<code>post</code>请求时，已发送了<code>http header</code>之后服务端将返回此信息，表示确认，之后发送具体参数信息</li></ul></li><li><code>2XX</code>：成功状态码<ul><li><code>200  OK</code>         正常返回信息</li><li><code>201  Created</code>   请求成功并且服务器创建了新的资源</li><li><code>202  Accepted</code>   服务器已接受请求，但尚未处理</li></ul></li><li><code>3XX</code>：重定向<ul><li><code>301  Moved Permanently</code>  请求的网页已永久移动到新位置。</li><li><code>302 Found</code>     临时性重定向。</li><li><code>303 See Other</code>  临时性重定向，且总是使用 <code>GET</code> 请求新的 <code>URI</code>。</li><li><code>304  Not Modified</code> 自从上次请求后，请求的网页未修改过。</li></ul></li><li><code>4XX</code>：客户端错误<ul><li><code>400 Bad Request</code> 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li><li><code>401 Unauthorized</code> 请求未授权。</li><li><code>403 Forbidden</code>  禁止访问。</li><li><code>404 Not Found</code>   找不到如何与 <code>URI</code> 相匹配的资源。</li></ul></li><li><code>5XX:</code> 服务器错误<ul><li><code>500 Internal Server Error</code>  最常见的服务器端错误。</li><li><code>503 Service Unavailable</code> 服务器端暂时无法处理请求（可能是过载或维护）。</li></ul></li></ul><h3 id="7、语义化的理解"><a href="#7、语义化的理解" class="headerlink" title="7、语义化的理解"></a>7、语义化的理解</h3><ul><li>用正确的标签做正确的事情！</li><li><code>html</code>语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；</li><li>在没有样式<code>CSS</code>情况下也以一种文档格式显示，并且是容易阅读的。</li><li>搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 <code>SEO</code>。</li><li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解</li></ul><h3 id="8、介绍一下你对浏览器内核的理解？"><a href="#8、介绍一下你对浏览器内核的理解？" class="headerlink" title="8、介绍一下你对浏览器内核的理解？"></a>8、介绍一下你对浏览器内核的理解？</h3><ul><li><p>主要分成两部分：渲染引擎(<code>layout engineer</code>或<code>Rendering Engine</code>)和<code>JS</code>引擎</p></li><li><p>渲染引擎：负责取得网页的内容（<code>HTML</code>、<code>XML</code>、图像等等）、整理讯息（例如加入<code>CSS</code>等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</p></li><li><code>JS</code>引擎则：解析和执行<code>javascript</code>来实现网页的动态效果</li><li>最开始渲染引擎和<code>JS</code>引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎</li></ul><h3 id="9、html5有哪些新特性、移除了那些元素？"><a href="#9、html5有哪些新特性、移除了那些元素？" class="headerlink" title="9、html5有哪些新特性、移除了那些元素？"></a>9、html5有哪些新特性、移除了那些元素？</h3><ul><li><p><code>HTML5</code> 现在已经不是 <code>SGML</code> 的子集，主要是关于图像，位置，存储，多任务等功能的增加</p><ul><li>绘画 <code>canvas</code></li><li>用于媒介回放的 <code>video</code> 和 <code>audio</code> 元素</li><li>本地离线存储 <code>localStorage</code> 长期存储数据，浏览器关闭后数据不丢失</li><li><code>sessionStorage</code> 的数据在浏览器关闭后自动删除</li><li>语意化更好的内容元素，比如<code>article</code>、<code>footer</code>、<code>header</code>、<code>nav</code>、<code>section</code></li><li>表单控件，<code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code></li><li>新的技术<code>webworker</code>, <code>websocket</code>, <code>Geolocation</code></li></ul></li><li><p>移除的元素：</p><ul><li>纯表现的元素：<code>basefont</code>，<code>big</code>，<code>center</code>，<code>font</code>, <code>s</code>，<code>strike，</code>tt，u`</li><li>对可用性产生负面影响的元素：<code>frame</code>，<code>frameset</code>，<code>noframes</code></li></ul></li><li><p>支持<code>HTML5</code>新标签：</p><ul><li><code>IE8/IE7/IE6</code>支持通过<code>document.createElement</code>方法产生的标签</li><li>可以利用这一特性让这些浏览器支<code>持HTML5</code>新标签</li><li>浏览器支持新标签后，还需要添加标签默认的样式</li></ul></li><li><p>当然也可以直接使用成熟的框架、比如<code>html5shim</code></p></li></ul><h3 id="10、HTML5的离线储存怎么使用，工作原理能不能解释一下？"><a href="#10、HTML5的离线储存怎么使用，工作原理能不能解释一下？" class="headerlink" title="10、HTML5的离线储存怎么使用，工作原理能不能解释一下？"></a>10、<code>HTML5</code>的离线储存怎么使用，工作原理能不能解释一下？</h3><ul><li><p>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件</p></li><li><p>原理：<code>HTML5</code>的离线存储是基于一个新建的<code>.appcache</code>文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像<code>cookie</code>一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</p></li><li><p>如何使用：</p><ul><li>页面头部像下面一样加入一个<code>manifest</code>的属性；</li><li>在<code>cache.manifest</code>文件的编写离线存储的资源</li><li>在离线状态时，操作<code>window.applicationCache</code>进行需求实现</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CACHE MANIFEST</div><div class="line">#v0.11</div><div class="line">CACHE:</div><div class="line">js/app.js</div><div class="line">css/style.css</div><div class="line">NETWORK:</div><div class="line">resourse/logo.png</div><div class="line">FALLBACK:</div><div class="line">/ <span class="regexp">/offline.html</span></div></pre></td></tr></table></figure><h3 id="11、浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"><a href="#11、浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢" class="headerlink" title="11、浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"></a>11、浏览器是怎么对<code>HTML5</code>的离线储存资源进行管理和加载的呢</h3><ul><li><p>在线的情况下，浏览器发现<code>html</code>头部有<code>manifest</code>属性，它会请求<code>manifest</code>文件，如果是第一次访问<code>app</code>，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过<code>app</code>并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的<code>manifest</code>文件与旧的<code>manifes</code>t文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</p></li><li><p>离线的情况下，浏览器就直接使用离线存储的资源。</p></li></ul><h3 id="12、请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#12、请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="12、请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>12、请描述一下 <code>cookies</code>，<code>sessionStorage</code> 和 <code>localStorage</code> 的区别？</h3><ul><li><code>cookie</code>是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</li><li>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递</li><li><code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存</li><li><p>存储大小：</p><ul><li><code>cookie</code>数据大小不能超过4k</li><li><code>sessionStorage</code>和<code>localStorage</code>虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到5M或更大</li></ul></li><li><p>有期时间：</p><ul><li><code>localStorage</code> 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</li><li><code>sessionStorage</code>  数据在当前浏览器窗口关闭后自动删除</li><li><code>cookie</code>  设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭</li></ul></li></ul><h3 id="13、iframe有那些缺点？"><a href="#13、iframe有那些缺点？" class="headerlink" title="13、iframe有那些缺点？"></a>13、iframe有那些缺点？</h3><ul><li><code>iframe</code>会阻塞主页面的<code>Onload</code>事件</li><li>搜索引擎的检索程序无法解读这种页面，不利于<code>SEO</code></li><li><code>iframe</code>和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li><li>使用<code>iframe</code>之前需要考虑这两个缺点。如果需要使用<code>iframe</code>，最好是通过<code>javascript</code>动态给<code>iframe</code>添加<code>src</code>属性值，这样可以绕开以上两个问题</li></ul><h3 id="14、WEB标准以及W3C标准是什么"><a href="#14、WEB标准以及W3C标准是什么" class="headerlink" title="14、WEB标准以及W3C标准是什么?"></a>14、WEB标准以及W3C标准是什么?</h3><ul><li>标签闭合、标签小写、不乱嵌套、使用外链<code>css</code>和<code>js</code>、结构行为表现的分离</li></ul><h3 id="15、xhtml和html有什么区别"><a href="#15、xhtml和html有什么区别" class="headerlink" title="15、xhtml和html有什么区别?"></a>15、xhtml和html有什么区别?</h3><ul><li><p>一个是功能上的差别</p><ul><li>主要是<code>XHTML</code>可兼容各大浏览器、手机以及<code>PDA</code>，并且浏览器也能快速正确地编译网页</li></ul></li><li><p>另外是书写习惯的差别</p><ul><li><code>XHTML</code> 元素必须被正确地嵌套，闭合，区分大小写，文档必须拥有根元素</li></ul></li></ul><h3 id="16、Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#16、Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="16、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a>16、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h3><ul><li>页面被加载的时，<code>link</code>会同时被加载，而<code>@imort</code>页面被加载的时，<code>link</code>会同时被加载，而<code>@import</code>引用的<code>CSS</code>会等到页面被加载完再加载<br><code>import</code>只在<code>IE5</code>以上才能识别，而<code>link</code>是<code>XHTML</code>标签，无兼容问题<br><code>link</code>方式的样式的权重 高于<code>@import</code>的权重</li><li><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器的解析器， 用什么文档类型 规范来解析这个文档</li><li>严格模式的排版和 <code>JS</code> 运作模式是 以该浏览器支持的最高标准运行</li><li>在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。 <code>DOCTYPE</code>不存在或格式不正确会导致文档以混杂模式呈现</li></ul><h3 id="17、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？行内元素和块级元素有什么区别？"><a href="#17、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？行内元素和块级元素有什么区别？" class="headerlink" title="17、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？"></a>17、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？</h3><ul><li>行内元素有：<code>a b span img input select strong</code></li><li>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4…p</code></li><li>空元素：<code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code></li><li>行内元素不可以设置宽高，不独占一行</li><li>块级元素可以设置宽高，独占一行</li></ul><h3 id="18、HTML全局属性-global-attribute-有哪些"><a href="#18、HTML全局属性-global-attribute-有哪些" class="headerlink" title="18、HTML全局属性(global attribute)有哪些"></a>18、HTML全局属性(global attribute)有哪些</h3><ul><li><code>class</code>:为元素设置类标识</li><li><code>data-*</code>: 为元素增加自定义属性</li><li><code>draggable</code>: 设置元素是否可拖拽</li><li><code>id</code>: 元素<code>id</code>，文档内唯一</li><li><code>lang</code>: 元素内容的的语言</li><li><code>style</code>: 行内<code>css</code>样式</li><li><code>title</code>: 元素相关的建议信息</li></ul><h3 id="19、Canvas和SVG有什么区别？"><a href="#19、Canvas和SVG有什么区别？" class="headerlink" title="19、Canvas和SVG有什么区别？"></a>19、Canvas和SVG有什么区别？</h3><ul><li><code>svg</code>绘制出来的每一个图形的元素都是独立的<code>DOM</code>节点，能够方便的绑定事件或用来修改。<code>canvas</code>输出的是一整幅画布</li><li><code>svg</code>输出的图形是矢量图形，后期可以修改参数来自由放大缩小，不会是真和锯齿。而<code>canvas</code>输出标量画布，就像一张图片一样，放大会失真或者锯齿</li></ul><h3 id="20、HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？"><a href="#20、HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？" class="headerlink" title="20、HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？"></a>20、HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？</h3><ul><li><code>HTML5</code> 不基于 <code>SGML</code>，因此不需要对<code>DTD</code>进行引用，但是需要<code>doctype</code>来规范浏览器的行为</li><li>而<code>HTML4.01</code>基于<code>SGML</code>,所以需要对<code>DTD</code>进行引用，才能告知浏览器文档所使用的文档类型</li></ul><h3 id="21、如何在页面上实现一个圆形的可点击区域？"><a href="#21、如何在页面上实现一个圆形的可点击区域？" class="headerlink" title="21、如何在页面上实现一个圆形的可点击区域？"></a>21、如何在页面上实现一个圆形的可点击区域？</h3><ul><li><code>svg</code></li><li><code>border-radius</code></li><li>纯<code>js</code>实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li></ul><h3 id="22、网页验证码是干嘛的，是为了解决什么安全问题"><a href="#22、网页验证码是干嘛的，是为了解决什么安全问题" class="headerlink" title="22、网页验证码是干嘛的，是为了解决什么安全问题"></a>22、网页验证码是干嘛的，是为了解决什么安全问题</h3><ul><li>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水</li><li>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试</li></ul><h2 id="CSS部分-1"><a href="#CSS部分-1" class="headerlink" title="$CSS部分"></a>$CSS部分</h2><h3 id="1、css-sprite是什么-有什么优缺点"><a href="#1、css-sprite是什么-有什么优缺点" class="headerlink" title="1、css sprite是什么,有什么优缺点"></a>1、css sprite是什么,有什么优缺点</h3><ul><li><p>概念：将多个小图片拼接到一个图片中。通过<code>background-position</code>和元素尺寸调节需要显示的背景图案。</p></li><li><p>优点：</p><ul><li>减少<code>HTTP</code>请求数，极大地提高页面加载速度</li><li>增加图片信息重复度，提高压缩比，减少图片大小</li><li>更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现</li></ul></li><li><p>缺点：</p><ul><li>图片合并麻烦</li><li>维护麻烦，修改一个图片可能需要从新布局整个图片，样式</li></ul></li></ul><h3 id="2、display-none-与visibility-hidden-的区别"><a href="#2、display-none-与visibility-hidden-的区别" class="headerlink" title="2、display: none;与visibility: hidden;的区别"></a>2、<code>display: none;</code>与<code>visibility: hidden;</code>的区别</h3><ul><li><p>联系：它们都能让元素不可见</p></li><li><p>区别：</p><ul><li><code>display:none</code>;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；<code>visibility: hidden</code>;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见</li><li><code>display: none</code>;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示<code>；visibility: hidden;</code>是继承属性，子孙节点消失由于继承了<code>hidden</code>，通过设置<code>visibility: visible;</code>可以让子孙节点显式</li><li>修改常规流中元素的<code>display</code>通常会造成文档重排。修改<code>visibility</code>属性只会造成本元素的重绘。</li><li>读屏器不会读取<code>display: none</code>;元素内容；会读取<code>visibility: hidden;</code>元素内容</li></ul></li></ul><h3 id="3、link与-import的区别"><a href="#3、link与-import的区别" class="headerlink" title="3、link与@import的区别"></a>3、<code>link</code>与<code>@import</code>的区别</h3><ol><li><code>link</code>是<code>HTML</code>方式， <code>@import</code>是CSS方式</li><li><code>link</code>最大限度支持并行下载，<code>@import</code>过多嵌套导致串行下载，出现<code>FOUC</code></li><li><code>link</code>可以通过<code>rel=&quot;alternate stylesheet&quot;</code>指定候选样式</li><li>浏览器对<code>link</code>支持早于<code>@import</code>，可以使用<code>@import</code>对老浏览器隐藏样式</li><li><code>@import</code>必须在样式规则之前，可以在css文件中引用其他文件</li><li>总体来说：<code>link</code>优于<code>@import</code></li></ol><h3 id="4、什么是FOUC-如何避免"><a href="#4、什么是FOUC-如何避免" class="headerlink" title="4、什么是FOUC?如何避免"></a>4、什么是FOUC?如何避免</h3><ul><li><code>Flash Of Unstyled Content</code>：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。</li><li><strong>解决方法</strong>：把样式表放到文档的<code>head</code></li></ul><h3 id="5、如何创建块级格式化上下文-block-formatting-context-BFC有什么用"><a href="#5、如何创建块级格式化上下文-block-formatting-context-BFC有什么用" class="headerlink" title="5、如何创建块级格式化上下文(block formatting context),BFC有什么用"></a>5、如何创建块级格式化上下文(block formatting context),BFC有什么用</h3><ul><li><p>创建规则：</p><ul><li>根元素</li><li>浮动元素（<code>float</code>不是<code>none</code>）</li><li>绝对定位元素（<code>position</code>取值为<code>absolute</code>或<code>fixed</code>）</li><li><code>display</code>取值为<code>inline-block</code>,<code>table-cell</code>, <code>table-caption</code>,<code>flex</code>, <code>inline-flex</code>之一的元素</li><li><code>overflow</code>不是<code>visible</code>的元素</li></ul></li><li><p>作用：</p><ul><li>可以包含浮动元素</li><li>不被浮动元素覆盖</li><li>阻止父子元素的<code>margin</code>折叠</li></ul></li></ul><h3 id="6、display-float-position的关系"><a href="#6、display-float-position的关系" class="headerlink" title="6、display,float,position的关系"></a>6、display,float,position的关系</h3><ul><li>如果<code>display</code>为<code>none</code>，那么<code>position</code>和<code>float</code>都不起作用，这种情况下元素不产生框</li><li>否则，如果<code>position</code>值为<code>absolute</code>或者<code>fixed</code>，框就是绝对定位的，<code>float</code>的计算值为<code>none</code>，<code>display</code>根据下面的表格进行调整。</li><li>否则，如果<code>float</code>不是<code>none</code>，框是浮动的，<code>display</code>根据下表进行调整</li><li>否则，如果元素是根元素，<code>display</code>根据下表进行调整</li><li>其他情况下<code>display</code>的值为指定值</li><li>总结起来：<strong>绝对定位、浮动、根元素都需要调整<code>display</code></strong></li></ul><h3 id="7、清除浮动的几种方式，各自的优缺点"><a href="#7、清除浮动的几种方式，各自的优缺点" class="headerlink" title="7、清除浮动的几种方式，各自的优缺点"></a>7、清除浮动的几种方式，各自的优缺点</h3><ul><li>父级<code>div</code>定义<code>height</code></li><li>结尾处加空<code>div</code>标签<code>clear:both</code></li><li>父级<code>div</code>定义伪类<code>:after</code>和<code>zoom</code></li><li>父级<code>div</code>定义<code>overflow:hidden</code></li><li>父级<code>div</code>也浮动，需要定义宽度</li><li>结尾处加<code>br</code>标签<code>clear:both</code></li><li>比较好的是第3种方式，好多网站都这么用</li></ul><h3 id="8、为什么要初始化CSS样式"><a href="#8、为什么要初始化CSS样式" class="headerlink" title="8、为什么要初始化CSS样式?"></a>8、为什么要初始化CSS样式?</h3><ul><li>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对<code>CSS</code>初始化往往会出现浏览器之间的页面显示差异。</li><li>当然，初始化样式会对<code>SEO</code>有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化</li></ul><h3 id="9、css3有哪些新特性"><a href="#9、css3有哪些新特性" class="headerlink" title="9、css3有哪些新特性"></a>9、css3有哪些新特性</h3><ul><li>新增各种<code>css</code>选择器 </li><li>圆角 <code>border-radius</code></li><li>多列布局</li><li>阴影和反射</li><li>文字特效<code>text-shadow</code></li><li>线性渐变</li><li>旋转<code>transform</code></li></ul><p><strong>CSS3新增伪类有那些？</strong></p><ul><li><code>p:first-of-type</code> 选择属于其父元素的首个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code> 元素。</li><li><code>p:last-of-type</code>  选择属于其父元素的最后 <code>&lt;p&gt;</code> 元素的每个<code>&lt;p&gt;</code> 元素。</li><li><code>p:only-of-type</code>  选择属于其父元素唯一的 <code>&lt;p&gt;</code>元素的每个 <code>&lt;p&gt;</code> 元素。</li><li><code>p:only-child</code>       选择属于其父元素的唯一子元素的每个 <code>&lt;p&gt;</code> 元素。</li><li><code>p:nth-child(2)</code>  选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素。</li><li><code>:after</code>        在元素之前添加内容,也可以用来做清除浮动。</li><li><code>:before</code>       在元素之后添加内容</li><li><code>:enabled</code>       </li><li><code>:disabled</code>      控制表单控件的禁用状态。</li><li><code>:checked</code>       单选框或复选框被选中</li></ul><h3 id="10、display有哪些值？说明他们的作用"><a href="#10、display有哪些值？说明他们的作用" class="headerlink" title="10、display有哪些值？说明他们的作用"></a>10、display有哪些值？说明他们的作用</h3><ul><li><code>block</code>      象块类型元素一样显示。</li><li><code>none</code>      缺省值。象行内元素类型一样显示。</li><li><code>inline-block</code> 象行内元素一样显示，但其内容象块类型元素一样显示。</li><li><code>list-item</code>   象块类型元素一样显示，并添加样式列表标记。</li><li><code>table</code>       此元素会作为块级表格来显示</li><li><code>inherit</code>      规定应该从父元素继承 <code>display</code> 属性的值</li></ul><h3 id="11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？"><a href="#11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？" class="headerlink" title="11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？"></a>11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</h3><ul><li>有两种， <code>IE</code>盒子模型、<code>W3C</code>盒子模型；</li><li>盒模型： 内容(content)、填充(<code>padding</code>)、边界(<code>margin</code>)、 边框(<code>border</code>)；</li><li>区  别： <code>IE</code>的c<code>ontent</code>部分把 <code>border</code> 和 <code>padding</code>计算了进去;</li></ul><h3 id="12、CSS优先级算法如何计算？"><a href="#12、CSS优先级算法如何计算？" class="headerlink" title="12、CSS优先级算法如何计算？"></a>12、CSS优先级算法如何计算？</h3><ul><li>优先级就近原则，同权重情况下样式定义最近者为准</li><li>载入样式以最后载入的定位为准</li><li>优先级为: <code>!important &gt;  id &gt; class &gt; tag</code> <code>important</code> 比 内联优先级高</li></ul><h3 id="13、对BFC规范的理解？"><a href="#13、对BFC规范的理解？" class="headerlink" title="13、对BFC规范的理解？"></a>13、对BFC规范的理解？</h3><ul><li>它决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用</li></ul><h3 id="14、谈谈浮动和清除浮动"><a href="#14、谈谈浮动和清除浮动" class="headerlink" title="14、谈谈浮动和清除浮动"></a>14、谈谈浮动和清除浮动</h3><ul><li>浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上</li></ul><h3 id="15、position的值，-relative和absolute定位原点是"><a href="#15、position的值，-relative和absolute定位原点是" class="headerlink" title="15、position的值， relative和absolute定位原点是"></a>15、position的值， relative和absolute定位原点是</h3><ul><li><code>absolute</code>：生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素进行定位</li><li><code>fixed</code>：生成绝对定位的元素，相对于浏览器窗口进行定位</li><li><code>relative</code>：生成相对定位的元素，相对于其正常位置进行定位</li><li><code>static</code> 默认值。没有定位，元素出现在正常的流中</li><li><code>inherit</code> 规定从父元素继承 <code>position</code> 属性的值</li></ul><h3 id="16、display-inline-block-什么时候不会显示间隙？-携程"><a href="#16、display-inline-block-什么时候不会显示间隙？-携程" class="headerlink" title="16、display:inline-block 什么时候不会显示间隙？(携程)"></a>16、display:inline-block 什么时候不会显示间隙？(携程)</h3><ul><li>移除空格</li><li>使用<code>margin</code>负值</li><li>使用<code>font-size:0</code></li><li><code>letter-spacing</code></li><li><code>word-spacing</code></li></ul><h3 id="17、PNG-GIF-JPG的区别及如何选"><a href="#17、PNG-GIF-JPG的区别及如何选" class="headerlink" title="17、PNG,GIF,JPG的区别及如何选"></a>17、PNG,GIF,JPG的区别及如何选</h3><ul><li><p><code>GIF</code></p><ul><li><code>8</code>位像素，<code>256</code>色</li><li>无损压缩</li><li>支持简单动画</li><li>支持<code>boolean</code>透明</li><li>适合简单动画</li></ul></li><li><p><code>JPEG</code></p><ul><li>颜色限于<code>256</code></li><li>有损压缩</li><li>可控制压缩质量</li><li>不支持透明</li><li>适合照片</li></ul></li><li><code>PNG</code><ul><li>有<code>PNG8</code>和<code>truecolor PNG</code></li><li><code>PNG8</code>类似<code>GIF</code>颜色上限为<code>256</code>，文件小，支持<code>alpha</code>透明度，无动画</li><li>适合图标、背景、按钮</li></ul></li></ul><h3 id="18、行内元素float-left后是否变为块级元素？"><a href="#18、行内元素float-left后是否变为块级元素？" class="headerlink" title="18、行内元素float:left后是否变为块级元素？"></a>18、行内元素float:left后是否变为块级元素？</h3><ul><li>浮动后，行内元素不会成为块状元素，但是可以设置宽高。行内元素要想变成块状元素，占一行，直接设置<code>display:block</code>;。但如果元素设置了浮动后再设置<code>display:block</code>;那就不会占一行。</li></ul><h3 id="19、在网页中的应该使用奇数还是偶数的字体？为什么呢？"><a href="#19、在网页中的应该使用奇数还是偶数的字体？为什么呢？" class="headerlink" title="19、在网页中的应该使用奇数还是偶数的字体？为什么呢？"></a>19、在网页中的应该使用奇数还是偶数的字体？为什么呢？</h3><ul><li>偶数字号相对更容易和 web 设计的其他部分构成比例关系</li></ul><h3 id="20、-before-和-after中双冒号和单冒号-有什么区别？解释一下这2个伪元素的作用"><a href="#20、-before-和-after中双冒号和单冒号-有什么区别？解释一下这2个伪元素的作用" class="headerlink" title="20、::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用"></a>20、::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用</h3><ul><li>单冒号(<code>:</code>)用于CSS3伪类，双冒号(<code>::</code>)用于<code>CSS3</code>伪元素</li><li>用于区分伪类和伪元素</li></ul><h3 id="21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）"><a href="#21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）" class="headerlink" title="21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）"></a>21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</h3><ul><li>多数显示器默认频率是<code>60Hz</code>，即<code>1</code>秒刷新<code>60</code>次，所以理论上最小间隔为<code>1/60＊1000ms ＝ 16.7ms</code></li></ul><h3 id="22、CSS合并方法"><a href="#22、CSS合并方法" class="headerlink" title="22、CSS合并方法"></a>22、CSS合并方法</h3><ul><li>避免使用<code>@import</code>引入多个<code>css</code>文件，可以使用<code>CSS</code>工具将<code>CSS</code>合并为一个<code>CSS</code>文件，例如使用<code>Sass\Compass</code>等</li></ul><h3 id="23、CSS不同选择器的权重-CSS层叠的规则"><a href="#23、CSS不同选择器的权重-CSS层叠的规则" class="headerlink" title="23、CSS不同选择器的权重(CSS层叠的规则)"></a>23、CSS不同选择器的权重(CSS层叠的规则)</h3><ul><li><code>！important</code>规则最重要，大于其它规则</li><li>行内样式规则，加<code>1000</code></li><li>对于选择器中给定的各个<code>ID</code>属性值，加<code>100</code></li><li>对于选择器中给定的各个类属性、属性选择器或者伪类选择器，加<code>10</code></li><li>对于选择其中给定的各个元素标签选择器，加1</li><li>如果权值一样，则按照样式规则的先后顺序来应用，顺序靠后的覆盖靠前的规则</li></ul><h3 id="24、列出你所知道可以改变页面布局的属性"><a href="#24、列出你所知道可以改变页面布局的属性" class="headerlink" title="24、列出你所知道可以改变页面布局的属性"></a>24、列出你所知道可以改变页面布局的属性</h3><ul><li><code>position</code>、<code>display</code>、<code>float</code>、<code>width</code>、<code>heigh</code>t、<code>margin</code>、<code>padding</code>、<code>top</code>、<code>left</code>、<code>right</code>、`</li></ul><h3 id="25、CSS在性能优化方面的实践"><a href="#25、CSS在性能优化方面的实践" class="headerlink" title="25、CSS在性能优化方面的实践"></a>25、CSS在性能优化方面的实践</h3><ul><li><code>css</code>压缩与合并、<code>Gzip</code>压缩</li><li><code>css</code>文件放在<code>head</code>里、不要用<code>@import</code></li><li>尽量用缩写、避免用滤镜、合理使用选择器</li></ul><h3 id="26、CSS3动画（简单动画的实现，如旋转等）"><a href="#26、CSS3动画（简单动画的实现，如旋转等）" class="headerlink" title="26、CSS3动画（简单动画的实现，如旋转等）"></a>26、CSS3动画（简单动画的实现，如旋转等）</h3><ul><li>依靠<code>CSS3</code>中提出的三个属性：<code>transition</code>、<code>transform</code>、<code>animation</code></li><li><code>transition</code>：定义了元素在变化过程中是怎么样的，包含<code>transition-property</code>、<code>transition-duration</code>、<code>transition-timing-function</code>、<code>transition-delay</code>。</li><li><code>transform</code>：定义元素的变化结果，包含<code>rotate</code>、<code>scale</code>、<code>skew</code>、<code>translate</code>。</li><li><code>animation</code>：动画定义了动作的每一帧（<code>@keyframes</code>）有什么效果，包括<code>animation-name</code>，<code>animation-duration</code>、<code>animation-timing-function</code>、<code>animation-delay</code>、<code>animation-iteration-count</code>、<code>animation-direction</code></li></ul><h3 id="27、base64的原理及优缺点"><a href="#27、base64的原理及优缺点" class="headerlink" title="27、base64的原理及优缺点"></a>27、base64的原理及优缺点</h3><ul><li>优点可以加密，减少了<code>http</code>请求</li><li>缺点是需要消耗<code>CPU</code>进行编解码</li></ul><h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="$JavaScript"></a>$JavaScript</h2><h3 id="1、闭包"><a href="#1、闭包" class="headerlink" title="1、闭包"></a>1、闭包</h3><ul><li><p>闭包就是能够读取其他函数内部变量的函数</p></li><li><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域</p></li><li><p>闭包的特性：</p><ul><li>函数内再嵌套函数</li><li>内部函数可以引用外层的参数和变量</li><li>参数和变量不会被垃圾回收机制回收</li></ul></li></ul><p><strong>说说你对闭包的理解</strong></p><ul><li><p>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念</p></li><li><p>闭包 的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中</p></li><li><p>闭包的另一个用处，是封装对象的私有属性和私有方法</p></li><li><p><strong>好处</strong>：能够实现封装和缓存等；</p></li><li><strong>坏处</strong>：就是消耗内存、不正当使用会造成内存溢出的问题</li></ul><p><strong>使用闭包的注意点</strong></p><ul><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露</li><li>解决方法是，在退出函数之前，将不使用的局部变量全部删除</li></ul><h3 id="2、说说你对作用域链的理解"><a href="#2、说说你对作用域链的理解" class="headerlink" title="2、说说你对作用域链的理解"></a>2、说说你对作用域链的理解</h3><ul><li>作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到<code>window</code>对象即被终止，作用域链向下访问变量是不被允许的</li><li>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期</li></ul><h3 id="3、JavaScript原型，原型链-有什么特点？"><a href="#3、JavaScript原型，原型链-有什么特点？" class="headerlink" title="3、JavaScript原型，原型链 ? 有什么特点？"></a>3、JavaScript原型，原型链 ? 有什么特点？</h3><ul><li>每个对象都会在其内部初始化一个属性，就是<code>prototype</code>(原型)，当我们访问一个对象的属性时</li><li>如果这个对象内部不存在这个属性，那么他就会去<code>prototype</code>里找这个属性，这<code>个prototype</code>又会有自己的<code>prototype</code>，于是就这样一直找下去，也就是我们平时所说的原型链的概念</li><li>关系：<code>instance.constructor.prototype = instance.__proto__</code></li><li><p>特点：</p><ul><li><code>JavaScript</code>对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变</li></ul></li><li><p>当我们需要一个属性的时，<code>Javascript</code>引擎会先看当前对象中是否有这个属性， 如果没有的</p></li><li>就会查找他的<code>Prototype</code>对象是否有这个属性，如此递推下去，一直检索到 <code>Object</code> 内建对象</li></ul><h3 id="4、请解释什么是事件代理"><a href="#4、请解释什么是事件代理" class="headerlink" title="4、请解释什么是事件代理"></a>4、请解释什么是事件代理</h3><ul><li>事件代理（<code>Event Delegation</code>），又称之为事件委托。是 <code>JavaScript</code> 中常用绑定事件的常用技巧。顾名思义，“事件代理”即是把原本需要绑定的事件委托给父元素，让父元素担当事件监听的职务。事件代理的原理是DOM元素的事件冒泡。使用事件代理的好处是可以提高性能</li><li>可以大量节省内存占用，减少事件注册，比如在<code>table</code>上代理所有<code>td</code>的<code>click</code>事件就非常棒 </li><li>可以实现当新增子对象时无需再次对其绑定</li></ul><h3 id="5、Javascript如何实现继承？"><a href="#5、Javascript如何实现继承？" class="headerlink" title="5、Javascript如何实现继承？"></a>5、Javascript如何实现继承？</h3><ul><li>构造继承</li><li>原型继承</li><li>实例继承</li><li><p>拷贝继承</p></li><li><p>原型<code>prototype</code>机制或<code>apply</code>和<code>call</code>方法去实现较简单，建议使用构造函数与原型混合方式</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.name = <span class="string">'wang'</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.age = <span class="number">28</span>;</div><div class="line">   &#125;</div><div class="line">   Child.prototype = <span class="keyword">new</span> Parent();<span class="comment">//继承了Parent，通过原型</span></div><div class="line"></div><div class="line">   <span class="keyword">var</span> demo = <span class="keyword">new</span> Child();</div><div class="line">   alert(demo.age);</div><div class="line">   alert(demo.name);<span class="comment">//得到被继承的属性</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure><h3 id="6、谈谈This对象的理解"><a href="#6、谈谈This对象的理解" class="headerlink" title="6、谈谈This对象的理解"></a>6、谈谈This对象的理解</h3><ul><li><code>this</code>总是指向函数的直接调用者（而非间接调用者）</li><li>如果有<code>new</code>关键字，<code>this</code>指向<code>new</code>出来的那个对象</li><li>在事件中，<code>this</code>指向触发这个事件的对象，特殊的是，<code>IE</code>中的<code>attachEvent</code>中的<code>this</code>总是指向全局对象<code>Window</code></li></ul><h3 id="7、事件模型"><a href="#7、事件模型" class="headerlink" title="7、事件模型"></a>7、事件模型</h3><blockquote><p><code>W3C</code>中定义事件的发生经历三个阶段：捕获阶段（<code>capturing</code>）、目标阶段（<code>targetin</code>）、冒泡阶段（<code>bubbling</code>）</p></blockquote><ul><li>冒泡型事件：当你使用事件冒泡时，子级元素先触发，父级元素后触发</li><li>捕获型事件：当你使用事件捕获时，父级元素先触发，子级元素后触发</li><li><code>DOM</code>事件流：同时支持两种事件模型：捕获型事件和冒泡型事件</li><li>阻止冒泡：在<code>W3c</code>中，使用<code>stopPropagation（）</code>方法；在IE下设置<code>cancelBubble = true</code></li><li>阻止捕获：阻止事件的默认行为，例如<code>click - &lt;a&gt;</code>后的跳转。在<code>W3c</code>中，使用<code>preventDefault（）</code>方法，在<code>IE</code>下设置<code>window.event.returnValue = false</code></li></ul><h3 id="8、new操作符具体干了什么呢"><a href="#8、new操作符具体干了什么呢" class="headerlink" title="8、new操作符具体干了什么呢?"></a>8、new操作符具体干了什么呢?</h3><ul><li>创建一个空对象，并且 <code>this</code> 变量引用该对象，同时还继承了该函数的原型</li><li>属性和方法被加入到 <code>this</code> 引用的对象中</li><li>新创建的对象由 <code>this</code> 所引用，并且最后隐式的返回 <code>this</code></li></ul><h3 id="9、Ajax原理"><a href="#9、Ajax原理" class="headerlink" title="9、Ajax原理"></a>9、Ajax原理</h3><ul><li><code>Ajax</code>的原理简单来说是在用户和服务器之间加了—个中间层(<code>AJAX</code>引擎)，通过<code>XmlHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用<code>javascrip</code>t来操作<code>DOM</code>而更新页面。使用户操作与服务器响应异步化。这其中最关键的一步就是从服务器获得请求数据</li><li><code>Ajax</code>的过程只涉及<code>JavaScript</code>、<code>XMLHttpRequest</code>和<code>DOM</code>。<code>XMLHttpRequest</code>是<code>aja</code>x的核心机制</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 创建连接</span></div><div class="line">   <span class="keyword">var</span> xhr = <span class="literal">null</span>;</div><div class="line">   xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">   <span class="comment">// 2. 连接服务器</span></div><div class="line">   xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)</div><div class="line">   <span class="comment">// 3. 发送请求</span></div><div class="line">   xhr.send(<span class="literal">null</span>);</div><div class="line">   <span class="comment">// 4. 接受请求</span></div><div class="line">   xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</div><div class="line">           <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</div><div class="line">               success(xhr.responseText);</div><div class="line">           &#125; <span class="keyword">else</span> &#123; <span class="comment">// fail</span></div><div class="line">               fail &amp;&amp; fail(xhr.status);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p><strong>ajax 有那些优缺点?</strong></p><ul><li>优点：<ul><li>通过异步模式，提升了用户体验.</li><li>优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用.</li><li><code>Ajax</code>在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</li><li><code>Ajax</code>可以实现动态不刷新（局部刷新）</li></ul></li><li>缺点：<ul><li>安全问题 <code>AJAX</code>暴露了与服务器交互的细节。</li><li>对搜索引擎的支持比较弱。</li><li>不容易调试。</li></ul></li></ul><h3 id="10、如何解决跨域问题"><a href="#10、如何解决跨域问题" class="headerlink" title="10、如何解决跨域问题?"></a>10、如何解决跨域问题?</h3><ul><li><code>jsonp</code>、 <code>iframe</code>、<code>window.name</code>、<code>window.postMessage</code>、服务器上设置代理页面</li></ul><h3 id="11、模块化开发怎么做？"><a href="#11、模块化开发怎么做？" class="headerlink" title="11、模块化开发怎么做？"></a>11、模块化开发怎么做？</h3><ul><li>立即执行函数,不暴露私有成员</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> _count = <span class="number">0</span>;</div><div class="line">　　　　<span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="comment">//...</span></div><div class="line">　　　　&#125;;</div><div class="line">　　　　<span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="comment">//...</span></div><div class="line">　　　　&#125;;</div><div class="line">　　　　<span class="keyword">return</span> &#123;</div><div class="line">　　　　　　m1 : m1,</div><div class="line">　　　　　　m2 : m2</div><div class="line">　　　　&#125;;</div><div class="line">　　&#125;)();</div></pre></td></tr></table></figure><h3 id="12、异步加载JS的方式有哪些？"><a href="#12、异步加载JS的方式有哪些？" class="headerlink" title="12、异步加载JS的方式有哪些？"></a>12、异步加载JS的方式有哪些？</h3><ul><li>defer，只支持<code>IE</code></li><li><code>async</code>：</li><li>创建<code>script</code>，插入到<code>DOM</code>中，加载完毕后<code>callBack</code></li></ul><h3 id="13、那些操作会造成内存泄漏？"><a href="#13、那些操作会造成内存泄漏？" class="headerlink" title="13、那些操作会造成内存泄漏？"></a>13、那些操作会造成内存泄漏？</h3><ul><li>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在</li><li><code>setTimeout</code> 的第一个参数使用字符串而非函数的话，会引发内存泄漏</li><li>闭包使用不当</li></ul><h3 id="14、XML和JSON的区别？"><a href="#14、XML和JSON的区别？" class="headerlink" title="14、XML和JSON的区别？"></a>14、XML和JSON的区别？</h3><ul><li><p>数据体积方面</p><ul><li><code>JSON</code>相对<code>于XML</code>来讲，数据的体积小，传递的速度更快些。</li></ul></li><li><p>数据交互方面</p><ul><li><code>JSON</code>与<code>JavaScript</code>的交互更加方便，更容易解析处理，更好的数据交互</li></ul></li><li><p>数据描述方面</p><ul><li><code>JSON</code>对数据的描述性比<code>XML</code>较差</li></ul></li><li><p>传输速度方面</p><ul><li><code>JSON</code>的速度要远远快于<code>XML</code></li></ul></li></ul><h3 id="15、谈谈你对webpack的看法"><a href="#15、谈谈你对webpack的看法" class="headerlink" title="15、谈谈你对webpack的看法"></a>15、谈谈你对webpack的看法</h3><ul><li><code>WebPack</code> 是一个模块打包工具，你可以使用<code>WebPack</code>管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包<code>Web</code>开发中所用到的<code>HTML</code>、<code>Javascript</code>、<code>CSS</code>以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，<code>webpack</code>有对应的模块加载器。<code>webpack</code>模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源</li></ul><h3 id="16、说说你对AMD和Commonjs的理解"><a href="#16、说说你对AMD和Commonjs的理解" class="headerlink" title="16、说说你对AMD和Commonjs的理解"></a>16、说说你对AMD和Commonjs的理解</h3><ul><li><code>CommonJS</code>是服务器端模块的规范，<code>Node.js</code>采用了这个规范。<code>CommonJS</code>规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。<code>AMD</code>规范则是非同步加载模块，允许指定回调函数</li><li><code>AMD</code>推荐的风格通过返回一个对象做为模块对象，<code>CommonJS</code>的风格通过对<code>module.exports</code>或<code>exports</code>的属性赋值来达到暴露模块对象的目的</li></ul><h3 id="17、常见web安全及防护原理"><a href="#17、常见web安全及防护原理" class="headerlink" title="17、常见web安全及防护原理"></a>17、常见web安全及防护原理</h3><ul><li><p><code>sql</code>注入原理</p><ul><li>就是通过把<code>SQL</code>命令插入到<code>Web</code>表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令</li></ul></li><li><p>总的来说有以下几点</p><ul><li>永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双<code>&quot;-&quot;</code>进行转换等</li><li>永远不要使用动态拼装SQL，可以使用参数化的<code>SQL</code>或者直接使用存储过程进行数据查询存取</li><li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接</li><li>不要把机密信息明文存放，请加密或者<code>hash</code>掉密码和敏感的信息</li></ul></li></ul><p><strong>XSS原理及防范</strong></p><ul><li><code>Xss(cross-site scripting)</code>攻击指的是攻击者往<code>Web</code>页面里插入恶意<code>html</code>标签或者<code>javascript</code>代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取<code>cookie</code>中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点</li></ul><p><strong>XSS防范方法</strong></p><ul><li>首先代码里对用户输入的地方和变量都需要仔细检查长度和对<code>”&lt;”,”&gt;”,”;”,”’”</code>等字符做过滤；其次任何内容写到页面之前都必须加以encode，避免不小心把<code>html tag</code> 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击</li></ul><p><strong>XSS与CSRF有什么区别吗？</strong></p><ul><li><p><code>XSS</code>是获取信息，不需要提前知道其他用户页面的代码和数据包。<code>CSRF</code>是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。要完成一次<code>CSRF</code>攻击，受害者必须依次完成两个步骤</p></li><li><p>登录受信任网站<code>A</code>，并在本地生成<code>Cookie</code></p></li><li>在不登出<code>A</code>的情况下，访问危险网站<code>B</code></li></ul><p><strong>CSRF的防御</strong></p><ul><li>服务端的<code>CSRF</code>方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数</li><li>通过验证码的方法</li></ul><h3 id="18、用过哪些设计模式？"><a href="#18、用过哪些设计模式？" class="headerlink" title="18、用过哪些设计模式？"></a>18、用过哪些设计模式？</h3><ul><li><p>工厂模式：</p><ul><li>工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法</li><li>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是<code>new</code>关键字</li></ul></li><li><p>构造函数模式</p><ul><li>使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于</li><li>直接将属性和方法赋值给 <code>this</code>对象;</li></ul></li></ul><h3 id="19、为什么要有同源限制？"><a href="#19、为什么要有同源限制？" class="headerlink" title="19、为什么要有同源限制？"></a>19、为什么要有同源限制？</h3><ul><li>同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议</li><li>举例说明：比如一个黑客程序，他利用<code>Iframe</code>把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过<code>Javascript</code>读取到你的表单中<code>input</code>中的内容，这样用户名，密码就轻松到手了。</li></ul><h3 id="20、offsetWidth-offsetHeight-clientWidth-clientHeight与scrollWidth-scrollHeight的区别"><a href="#20、offsetWidth-offsetHeight-clientWidth-clientHeight与scrollWidth-scrollHeight的区别" class="headerlink" title="20、offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别"></a>20、offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别</h3><ul><li><code>offsetWidth/offsetHeight</code>返回值包含<strong>content + padding + border</strong>，效果与e.getBoundingClientRect()相同</li><li><code>clientWidth/clientHeight</code>返回值只包含<strong>content + padding</strong>，如果有滚动条，也<strong>不包含滚动条</strong></li><li><code>scrollWidth/scrollHeight</code>返回值包含<strong>content + padding + 溢出内容的尺寸</strong></li></ul><h3 id="21、javascript有哪些方法定义对象"><a href="#21、javascript有哪些方法定义对象" class="headerlink" title="21、javascript有哪些方法定义对象"></a>21、javascript有哪些方法定义对象</h3><ul><li>对象字面量： <code>var obj = {};</code></li><li>构造函数： <code>var obj = new Object();</code></li><li>Object.create(): <code>var obj = Object.create(Object.prototype);</code></li></ul><h3 id="22、常见兼容性问题？"><a href="#22、常见兼容性问题？" class="headerlink" title="22、常见兼容性问题？"></a>22、常见兼容性问题？</h3><ul><li><code>png24</code>位的图片在iE6浏览器上出现背景，解决方案是做成<code>PNG8</code></li><li>浏览器默认的<code>margin</code>和<code>padding</code>不同。解决方案是加一个全局的<code>*{margin:0;padding:0;}</code>来统一,，但是全局效率很低，一般是如下这样解决：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">form</span>,<span class="selector-tag">input</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>&#123;</div><div class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>IE</code>下,<code>event</code>对象有<code>x</code>,<code>y</code>属性,但是没有<code>pageX</code>,<code>pageY</code>属性</li><li><code>Firefox</code>下,<code>event</code>对象有<code>pageX</code>,<code>pageY</code>属性,但是没有<code>x,y</code>属性.</li></ul><h3 id="22、说说你对promise的了解"><a href="#22、说说你对promise的了解" class="headerlink" title="22、说说你对promise的了解"></a>22、说说你对promise的了解</h3><ul><li><p>依照 <code>Promise/A+</code> 的定义，<code>Promise</code> 有四种状态：</p><ul><li><p><code>pending:</code> 初始状态, 非 <code>fulfilled</code> 或 <code>rejected.</code></p></li><li><p><code>fulfilled:</code> 成功的操作.</p></li><li><p><code>rejected:</code> 失败的操作.</p></li><li><p><code>settled: Promise</code>已被<code>fulfilled</code>或<code>rejected</code>，且不是<code>pending</code></p></li></ul></li><li><p>另外， <code>fulfilled</code>与 <code>rejected</code>一起合称 <code>settled</code></p></li><li><code>Promise</code> 对象用来进行延迟(<code>deferred</code>) 和异步(<code>asynchronous</code>) 计算</li></ul><p><strong>Promise 的构造函数</strong></p><ul><li>构造一个 <code>Promise</code>，最基本的用法如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (...) &#123;  <span class="comment">// succeed</span></div><div class="line"></div><div class="line">            resolve(result);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">// fails</span></div><div class="line"></div><div class="line">            reject(<span class="built_in">Error</span>(errMessage));</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><ul><li><p><code>Promise</code> 实例拥有 <code>then</code> 方法（具有 <code>then</code> 方法的对象，通常被称为<code>thenable</code>）。它的使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">promise.then(onFulfilled, onRejected)</div></pre></td></tr></table></figure></li><li><p>接收两个函数作为参数，一个在 <code>fulfilled</code> 的时候被调用，一个在<code>rejected</code>的时候被调用，接收参数就是 <code>future</code>，<code>onFulfilled</code> 对应<code>resolve</code>, <code>onRejected</code>对应 <code>reject</code></p></li></ul><h3 id="23、你觉得jQuery源码有哪些写的好的地方"><a href="#23、你觉得jQuery源码有哪些写的好的地方" class="headerlink" title="23、你觉得jQuery源码有哪些写的好的地方"></a>23、你觉得jQuery源码有哪些写的好的地方</h3><ul><li><code>jquery</code>源码封装在一个匿名函数的自执行环境中，有助于防止变量的全局污染，然后通过传入<code>window</code>对象参数，可以使<code>window</code>对象作为局部变量使用，好处是当<code>jquery</code>中访问<code>window</code>对象的时候，就不用将作用域链退回到顶层作用域了，从而可以更快的访问window对象。同样，传入<code>undefined</code>参数，可以缩短查找<code>undefined</code>时的作用域链</li><li><code>jquery</code>将一些原型属性和方法封装在了<code>jquery.prototype</code>中，为了缩短名称，又赋值给了<code>jquery.fn</code>，这是很形象的写法</li><li>有一些数组或对象的方法经常能使用到，<code>jQuery</code>将其保存为局部变量以提高访问速度</li><li><code>jquery</code>实现的链式调用可以节约代码，所返回的都是同一个对象，可以提高代码效率</li></ul><h3 id="24、vue、react、angular"><a href="#24、vue、react、angular" class="headerlink" title="24、vue、react、angular"></a>24、vue、react、angular</h3><ul><li><p><code>Vue.js</code><br>一个用于创建 <code>web</code> 交互界面的库，是一个精简的 <code>MVVM</code>。它通过双向数据绑定把 <code>View</code> 层和 <code>Model</code> 层连接了起来。实际的 <code>DOM</code> 封装和输出格式都被抽象为了<code>Directives</code> 和 <code>Filters</code></p></li><li><p><code>AngularJS</code><br>是一个比较完善的前端<code>MVVM</code>框架，包含模板，数据双向绑定，路由，模块化，服务，依赖注入等所有功能，模板功能强大丰富，自带了丰富的 <code>Angular</code>指令</p></li><li><p><code>react</code><br><code>React</code> 仅仅是 <code>VIEW</code> 层是<code>facebook</code>公司。推出的一个用于构建<code>UI</code>的一个库，能够实现服务器端的渲染。用了<code>virtual dom</code>，所以性能很好。</p></li></ul><h3 id="25、Node的应用场景"><a href="#25、Node的应用场景" class="headerlink" title="25、Node的应用场景"></a>25、Node的应用场景</h3><ul><li><p>特点：</p><ul><li>1、它是一个<code>Javascript</code>运行环境</li><li>2、依赖于<code>Chrome V8</code>引擎进行代码解释</li><li>3、事件驱动</li><li>4、非阻塞<code>I/O</code></li><li>5、单进程，单线程</li></ul></li><li><p>优点：</p><ul><li>高并发（最重要的优点）</li></ul></li><li><p>缺点：</p><ul><li>1、只支持单<code>核CPU</code>，不能充分利用<code>CPU</code></li><li>2、可靠性低，一旦代码某个环节崩溃，整个系统都崩溃</li></ul></li></ul><h3 id="26、谈谈你对AMD、CMD的理解"><a href="#26、谈谈你对AMD、CMD的理解" class="headerlink" title="26、谈谈你对AMD、CMD的理解"></a>26、谈谈你对AMD、CMD的理解</h3><ul><li><p><code>CommonJS</code>是服务器端模块的规范，<code>Node.js</code>采用了这个规范。<code>CommonJS</code>规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。<code>AMD</code>规范则是非同步加载模块，允许指定回调函数</p></li><li><p><code>AMD</code>推荐的风格通过返回一个对象做为模块对象，<code>CommonJS</code>的风格通过对<code>module.exports</code>或<code>exports</code>的属性赋值来达到暴露模块对象的目的</p></li></ul><h3 id="27、那些操作会造成内存泄漏？"><a href="#27、那些操作会造成内存泄漏？" class="headerlink" title="27、那些操作会造成内存泄漏？"></a>27、那些操作会造成内存泄漏？</h3><ul><li>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在</li><li><code>setTimeout</code> 的第一个参数使用字符串而非函数的话，会引发内存泄漏</li><li>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</li></ul><h3 id="28、web开发中会话跟踪的方法有哪些"><a href="#28、web开发中会话跟踪的方法有哪些" class="headerlink" title="28、web开发中会话跟踪的方法有哪些"></a>28、web开发中会话跟踪的方法有哪些</h3><ul><li><code>cookie</code></li><li><code>session</code></li><li><code>url</code>重写</li><li>隐藏<code>input</code></li><li><code>ip</code>地址</li></ul><h3 id="29、介绍js的基本数据类型"><a href="#29、介绍js的基本数据类型" class="headerlink" title="29、介绍js的基本数据类型"></a>29、介绍js的基本数据类型</h3><ul><li><code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code></li></ul><h3 id="30、介绍js有哪些内置对象？"><a href="#30、介绍js有哪些内置对象？" class="headerlink" title="30、介绍js有哪些内置对象？"></a>30、介绍js有哪些内置对象？</h3><ul><li><code>Object</code> 是 <code>JavaScript</code> 中所有对象的父对象</li><li>数据封装类对象：<code>Object</code>、<code>Array</code>、<code>Boolean</code>、<code>Number</code> 和 <code>String</code></li><li>其他对象：<code>Function</code>、<code>Arguments</code>、<code>Math</code>、<code>Date</code>、<code>RegExp</code>、<code>Error</code></li></ul><h3 id="31、说几条写JavaScript的基本规范？"><a href="#31、说几条写JavaScript的基本规范？" class="headerlink" title="31、说几条写JavaScript的基本规范？"></a>31、说几条写JavaScript的基本规范？</h3><ul><li>不要在同一行声明多个变量</li><li>请使用<code>===/!==</code>来比较<code>true/false</code>或者数值</li><li>使用对象字面量替代<code>new Array</code>这种形式</li><li>不要使用全局函数</li><li><code>Switch</code>语句必须带有<code>default</code>分支</li><li><code>If</code>语句必须使用大括号</li><li><code>for-in</code>循环中的变量 应该使用<code>var</code>关键字明确限定作用域，从而避免作用域污</li></ul><h3 id="32、JavaScript有几种类型的值？，你能画一下他们的内存图吗？"><a href="#32、JavaScript有几种类型的值？，你能画一下他们的内存图吗？" class="headerlink" title="32、JavaScript有几种类型的值？，你能画一下他们的内存图吗？"></a>32、JavaScript有几种类型的值？，你能画一下他们的内存图吗？</h3><ul><li>栈：原始数据类型（<code>Undefined</code>，<code>Null</code>，<code>Boolean</code>，<code>Numbe</code>r、<code>String</code>）</li><li>堆：引用数据类型（对象、数组和函数）</li><li>两种类型的区别是：存储位置不同；</li><li>原始数据类型直接存储在栈(<code>stack</code>)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li><li>引用数据类型存储在堆(<code>heap</code>)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其</li><li>在栈中的地址，取得地址后从堆中获得实体</li></ul><p><img src="https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966" alt=""></p><h3 id="33、javascript创建对象的几种方式？"><a href="#33、javascript创建对象的几种方式？" class="headerlink" title="33、javascript创建对象的几种方式？"></a>33、javascript创建对象的几种方式？</h3><blockquote><p><code>javascript</code>创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用<code>JSON</code>；但写法有很多种，也能混合使用</p></blockquote><ul><li>对象字面量的方式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">person=&#123;<span class="attr">firstname</span>:<span class="string">"Mark"</span>,<span class="attr">lastname</span>:<span class="string">"Yun"</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="attr">eyecolor</span>:<span class="string">"black"</span>&#125;;</div></pre></td></tr></table></figure><ul><li>用<code>function</code>来模拟无参的构造函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    <span class="keyword">var</span> person=<span class="keyword">new</span> Person();<span class="comment">//定义一个function，如果使用new"实例化",该function可以看作是一个Class</span></div><div class="line">        person.name=<span class="string">"Mark"</span>;</div><div class="line">        person.age=<span class="string">"25"</span>;</div><div class="line">        person.work=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(person.name+<span class="string">" hello..."</span>);</div><div class="line">    &#125;</div><div class="line">person.work();</div></pre></td></tr></table></figure><ul><li>用<code>function</code>来模拟参构造函数来实现（用<code>this</code>关键字定义构造的上下文属性）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">name,age,hobby</span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.name=name;<span class="comment">//this作用域：当前对象</span></div><div class="line">       <span class="keyword">this</span>.age=age;</div><div class="line">       <span class="keyword">this</span>.hobby=hobby;</div><div class="line">       <span class="keyword">this</span>.eat=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          alert(<span class="string">"我叫"</span>+<span class="keyword">this</span>.name+<span class="string">",我喜欢"</span>+<span class="keyword">this</span>.hobby+<span class="string">",是个程序员"</span>);</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> maidou =<span class="keyword">new</span> Pet(<span class="string">"麦兜"</span>,<span class="number">25</span>,<span class="string">"coding"</span>);<span class="comment">//实例化、创建对象</span></div><div class="line">    maidou.eat();<span class="comment">//调用eat方法</span></div></pre></td></tr></table></figure><ul><li>用工厂方式来创建（内置对象）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var wcDog =new Object();</div><div class="line">     wcDog.name=&quot;旺财&quot;;</div><div class="line">     wcDog.age=3;</div><div class="line">     wcDog.work=function()&#123;</div><div class="line">       alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);</div><div class="line">     &#125;</div><div class="line">     wcDog.work();</div></pre></td></tr></table></figure><ul><li>用原型方式来创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function Dog()&#123;</div><div class="line"></div><div class="line">     &#125;</div><div class="line">     Dog.prototype.name=&quot;旺财&quot;;</div><div class="line">     Dog.prototype.eat=function()&#123;</div><div class="line">     alert(this.name+&quot;是个吃货&quot;);</div><div class="line">     &#125;</div><div class="line">     var wangcai =new Dog();</div><div class="line">     wangcai.eat();</div></pre></td></tr></table></figure><ul><li>用混合方式来创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function Car(name,price)&#123;</div><div class="line">     this.name=name;</div><div class="line">     this.price=price; </div><div class="line">   &#125;</div><div class="line">    Car.prototype.sell=function()&#123;</div><div class="line">      alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);</div><div class="line">     &#125;</div><div class="line">   var camry =new Car(&quot;凯美瑞&quot;,27);</div><div class="line">   camry.sell();</div></pre></td></tr></table></figure><h3 id="34、eval是做什么的？"><a href="#34、eval是做什么的？" class="headerlink" title="34、eval是做什么的？"></a>34、eval是做什么的？</h3><ul><li>它的功能是把对应的字符串解析成<code>JS</code>代码并运行</li><li>应该避免使用<code>eval</code>，不安全，非常耗性能（<code>2</code>次，一次解析成<code>js</code>语句，一次执行）</li><li>由<code>JSON</code>字符串转换为JSON对象的时候可以用<code>eval，var obj =eval(&#39;(&#39;+ str +&#39;)&#39;)</code></li></ul><h3 id="35、null，undefined-的区别？"><a href="#35、null，undefined-的区别？" class="headerlink" title="35、null，undefined 的区别？"></a>35、null，undefined 的区别？</h3><ul><li><code>undefined</code>   表示不存在这个值。</li><li><code>undefined</code> :是一个表示”无”的原始值或者说表示”缺少值”，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 <code>undefined</code></li><li><p>例如变量被声明了，但没有赋值时，就等于<code>undefined</code></p></li><li><p><code>null</code> 表示一个对象被定义了，值为“空值”</p></li><li><code>null</code> : 是一个对象(空对象, 没有任何属性和方法)</li><li><p>例如作为函数的参数，表示该函数的参数不是对象；</p></li><li><p>在验证<code>null</code>时，一定要使用　<code>===</code> ，因为 <code>==</code>无法分别<code>null</code> 和　<code>undefined</code></p></li></ul><h3 id="36、-“1”-“2”-“3”-map-parseInt-答案是多少？"><a href="#36、-“1”-“2”-“3”-map-parseInt-答案是多少？" class="headerlink" title="36、[“1”, “2”, “3”].map(parseInt) 答案是多少？"></a>36、[“1”, “2”, “3”].map(parseInt) 答案是多少？</h3><ul><li><code>[1, NaN, NaN]</code>因为 <code>parseInt</code> 需要两个参数 <code>(val, radix)</code>，其中<code>radix</code> 表示解析时用的基数。</li><li><code>map</code>传了 <code>3</code>个<code>(element, index, array)</code>，对应的 <code>radix</code> 不合法导致解析失败。</li></ul><h3 id="37、javascript-代码中的”use-strict”-是什么意思-使用它区别是什么？"><a href="#37、javascript-代码中的”use-strict”-是什么意思-使用它区别是什么？" class="headerlink" title="37、javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？"></a>37、javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</h3><ul><li><code>use strict</code>是一种<code>ECMAscript 5</code> 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,使<code>JS</code>编码更加规范化的模式,消除<code>Javascript</code>语法的一些不合理、不严谨之处，减少一些怪异行为</li></ul><h3 id="38、JSON-的了解？"><a href="#38、JSON-的了解？" class="headerlink" title="38、JSON 的了解？**"></a>38、JSON 的了解？**</h3><ul><li><code>JSON(JavaScript Object Notation)</code> 是一种轻量级的数据交换格式</li><li><p>它是基于<code>JavaScript</code>的一个子集。数据格式简单, 易于读写, 占用带宽小</p></li><li><p><code>JSON</code>字符串转换为JSON对象:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);</div><div class="line">var obj = str.parseJSON();</div><div class="line">var obj = JSON.parse(str);</div></pre></td></tr></table></figure><ul><li><code>JSON</code>对象转换为JSON字符串：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var last=obj.toJSONString();</div><div class="line">var last=JSON.stringify(obj);</div></pre></td></tr></table></figure><h3 id="39、js延迟加载的方式有哪些？"><a href="#39、js延迟加载的方式有哪些？" class="headerlink" title="39、js延迟加载的方式有哪些？"></a>39、js延迟加载的方式有哪些？</h3><ul><li><code>defer</code>和<code>async</code>、动态创建<code>DOM</code>方式（用得最多）、按需异步载入<code>js</code></li></ul><h3 id="40、同步和异步的区别"><a href="#40、同步和异步的区别" class="headerlink" title="40、同步和异步的区别?"></a>40、同步和异步的区别?</h3><ul><li>同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作</li><li>异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容</li></ul><h3 id="41、渐进增强和优雅降级"><a href="#41、渐进增强和优雅降级" class="headerlink" title="41、渐进增强和优雅降级"></a>41、渐进增强和优雅降级</h3><ul><li><p>渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p></li><li><p>优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</p></li></ul><h3 id="42、defer和async"><a href="#42、defer和async" class="headerlink" title="42、defer和async"></a>42、defer和async</h3><ul><li><code>defer</code>并行加载<code>js</code>文件，会按照页面上<code>script</code>标签的顺序执行</li><li><code>async</code>并行加载<code>js</code>文件，下载完成立即执行，不会按照页面上<code>script</code>标签的顺序执行</li></ul><h3 id="43、说说严格模式的限制"><a href="#43、说说严格模式的限制" class="headerlink" title="43、说说严格模式的限制"></a>43、说说严格模式的限制</h3><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用<code>with</code>语句</li><li>禁止<code>this</code>指向全局对象</li></ul><h3 id="44、attribute和property的区别是什么？"><a href="#44、attribute和property的区别是什么？" class="headerlink" title="44、attribute和property的区别是什么？"></a>44、attribute和property的区别是什么？</h3><ul><li><code>attribute</code>是<code>dom</code>元素在文档中作为<code>html</code>标签拥有的属性；</li><li><code>property</code>就是<code>dom</code>元素在<code>js</code>中作为对象拥有的属性。</li><li>对于<code>html</code>的标准属性来说，<code>attribute</code>和<code>property</code>是同步的，是会自动更新的</li><li>但是对于自定义的属性来说，他们是不同步的</li></ul><h3 id="45、谈谈你对ES6的理解"><a href="#45、谈谈你对ES6的理解" class="headerlink" title="45、谈谈你对ES6的理解"></a>45、谈谈你对ES6的理解</h3><ul><li>新增模板字符串（为<code>JavaScript</code>提供了简单的字符串插值功能）</li><li>箭头函数</li><li><code>for-of</code>（用来遍历数据—例如数组中的值。）</li><li><code>arguments</code>对象可被不定参数和默认参数完美代替。</li><li><code>ES6</code>将p<code>romise</code>对象纳入规范，提供了原生的<code>Promise</code>对象。</li><li>增加了<code>let</code>和<code>const</code>命令，用来声明变量。</li><li>增加了块级作用域。</li><li><code>let</code>命令实际上就增加了块级作用域。</li><li>还有就是引入<code>module</code>模块的概念</li></ul><h3 id="46、ECMAScript6-怎么写class么，为什么会出现class这种东西"><a href="#46、ECMAScript6-怎么写class么，为什么会出现class这种东西" class="headerlink" title="46、ECMAScript6 怎么写class么，为什么会出现class这种东西?"></a>46、ECMAScript6 怎么写class么，为什么会出现class这种东西?</h3><ul><li>这个语法糖可以让有<code>OOP</code>基础的人更快上手<code>js</code>，至少是一个官方的实现了</li><li>但对熟悉<code>js</code>的人来说，这个东西没啥大影响；一个<code>Object.creat()</code>搞定继承，比<code>class</code>简洁清晰的多</li></ul><h3 id="47、什么是面向对象编程及面向过程编程，它们的异同和优缺点"><a href="#47、什么是面向对象编程及面向过程编程，它们的异同和优缺点" class="headerlink" title="47、什么是面向对象编程及面向过程编程，它们的异同和优缺点"></a>47、什么是面向对象编程及面向过程编程，它们的异同和优缺点</h3><ul><li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了</li><li>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为</li><li>面向对象是以功能来划分问题，而不是步骤</li></ul><h3 id="48、面向对象编程思想"><a href="#48、面向对象编程思想" class="headerlink" title="48、面向对象编程思想"></a>48、面向对象编程思想</h3><ul><li>基本思想是使用对象，类，继承，封装等基本概念来进行程序设计</li><li>优点<ul><li>易维护<ul><li>采用面向对象思想设计的结构，可读性高，由于继承的存在，即使改变需求，那么维护也只是在局部模块，所以维护起来是非常方便和较低成本的</li></ul></li><li>易扩展</li><li>开发工作的重用性、继承性高，降低重复工作量。</li><li>缩短了开发周期</li></ul></li></ul><h3 id="49、对web标准、可用性、可访问性的理解"><a href="#49、对web标准、可用性、可访问性的理解" class="headerlink" title="49、对web标准、可用性、可访问性的理解"></a>49、对web标准、可用性、可访问性的理解</h3><ul><li>可用性（Usability）：产品是否容易上手，用户能否完成任务，效率如何，以及这过程中用户的主观感受可好，是从用户的角度来看产品的质量。可用性好意味着产品质量高，是企业的核心竞争力</li><li>可访问性（Accessibility）：Web内容对于残障用户的可阅读和可理解性</li><li>可维护性（Maintainability）：一般包含两个层次，一是当系统出现问题时，快速定位并解决问题的成本，成本低则可维护性好。二是代码是否容易被人理解，是否容易修改和增强功能。</li></ul><h2 id="编程题-1"><a href="#编程题-1" class="headerlink" title="$编程题"></a>$编程题</h2><h3 id="1、写一个通用的事件侦听器函数"><a href="#1、写一个通用的事件侦听器函数" class="headerlink" title="1、写一个通用的事件侦听器函数"></a>1、写一个通用的事件侦听器函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// event(事件)工具集，来源：github.com/markyun</span></div><div class="line">   markyun.Event = &#123;</div><div class="line">      </div><div class="line">       <span class="comment">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></div><div class="line">       <span class="comment">// 参数： 操作的元素,事件名称 ,事件处理程序</span></div><div class="line">       addEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (element.addEventListener) &#123;</div><div class="line">               <span class="comment">//事件类型、需要执行的函数、是否捕捉</span></div><div class="line">               element.addEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</div><div class="line">               element.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   handler.call(element);</div><div class="line">               &#125;);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               element[<span class="string">'on'</span> + type] = handler;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line">       <span class="comment">// 移除事件</span></div><div class="line">       removeEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (element.removeEventListener) &#123;</div><div class="line">               element.removeEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.datachEvent) &#123;</div><div class="line">               element.detachEvent(<span class="string">'on'</span> + type, handler);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line">       <span class="comment">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span></div><div class="line">       stopPropagation : <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (ev.stopPropagation) &#123;</div><div class="line">               ev.stopPropagation();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               ev.cancelBubble = <span class="literal">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line">       <span class="comment">// 取消事件的默认行为</span></div><div class="line">       preventDefault : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (event.preventDefault) &#123;</div><div class="line">               event.preventDefault();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               event.returnValue = <span class="literal">false</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line">       <span class="comment">// 获取事件目标</span></div><div class="line">       getTarget : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">       &#125;</div></pre></td></tr></table></figure><h3 id="2、如何判断一个对象是否为数组"><a href="#2、如何判断一个对象是否为数组" class="headerlink" title="2、如何判断一个对象是否为数组"></a>2、如何判断一个对象是否为数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3、冒泡排序"><a href="#3、冒泡排序" class="headerlink" title="3、冒泡排序"></a>3、冒泡排序</h3><ul><li>每次比较相邻的两个数，如果后一个比前一个小，换位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</div><div class="line">        <span class="keyword">if</span>(arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</div><div class="line">            <span class="keyword">var</span> temp;</div><div class="line">            temp = arr[j];</div><div class="line">            arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">            arr[j + <span class="number">1</span>] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(bubbleSort(arr));</div></pre></td></tr></table></figure><h3 id="4、快速排序"><a href="#4、快速排序" class="headerlink" title="4、快速排序"></a>4、快速排序</h3><ul><li>采用二分法，取出中间数，数组每次和中间数比较，小的放到左边，大的放到右边</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arr.length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> [];    <span class="comment">// 返回空数组</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> cIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</div><div class="line">    <span class="keyword">var</span> c = arr.splice(cIndex, <span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> l = [];</div><div class="line">    <span class="keyword">var</span> r = [];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] &lt; c) &#123;</div><div class="line">            l.push(arr[i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            r.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> quickSort(l).concat(c, quickSort(r));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(quickSort(arr));</div></pre></td></tr></table></figure><h3 id="5、编写一个方法-求一个字符串的字节长度"><a href="#5、编写一个方法-求一个字符串的字节长度" class="headerlink" title="5、编写一个方法 求一个字符串的字节长度"></a>5、编写一个方法 求一个字符串的字节长度</h3><ul><li>假设：一个英文字符占用一个字节，一个中文字符占用两个字节    </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetBytes</span>(<span class="params">str</span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> len = str.length;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> bytes = len;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (str.charCodeAt(i) &gt; <span class="number">255</span>) bytes++;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> bytes;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">alert(GetBytes(<span class="string">"你好,as"</span>));</div></pre></td></tr></table></figure><h3 id="6、bind的用法，以及如何实现bind的函数和需要注意的点"><a href="#6、bind的用法，以及如何实现bind的函数和需要注意的点" class="headerlink" title="6、bind的用法，以及如何实现bind的函数和需要注意的点"></a>6、bind的用法，以及如何实现bind的函数和需要注意的点</h3><ul><li><code>bind</code>的作用与<code>call</code>和<code>apply</code>相同，区别是<code>call</code>和<code>apply</code>是立即调用函数，而<code>bind</code>是返回了一个函数，需要调用的时候再执行。<br>一个简单的<code>bind</code>函数实现如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> fn = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        fn.apply(ctx, <span class="built_in">arguments</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="$其他"></a>$其他</h2><h3 id="1、谈谈你对重构的理解"><a href="#1、谈谈你对重构的理解" class="headerlink" title="1、谈谈你对重构的理解"></a>1、谈谈你对重构的理解</h3><ul><li>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变UI的情况下，对网站进行优化， 在扩展的同时保持一致的UI</li><li><p>对于传统的网站来说重构通常是：</p><ul><li><p>表格(<code>table</code>)布局改为<code>DIV+CSS</code></p></li><li><p>使网站前端兼容于现代浏览器(针对于不合规范的<code>CSS</code>、如对IE6有效的)</p></li><li><p>对于移动平台的优化</p></li><li><p>针对于<code>SEO</code>进行优化</p></li></ul></li></ul><h3 id="2、什么样的前端代码是好的"><a href="#2、什么样的前端代码是好的" class="headerlink" title="2、什么样的前端代码是好的"></a>2、什么样的前端代码是好的</h3><ul><li>高复用低耦合，这样文件小，好维护，而且好扩展。</li></ul><h3 id="3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？"><a href="#3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？" class="headerlink" title="3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？"></a>3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</h3><ul><li><p>前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近</p><ul><li>实现界面交互</li><li>提升用户体验</li><li>有了Node.js，前端可以实现服务端的一些事情</li></ul></li><li><p>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，</p></li></ul><ul><li><p>与团队成员，<code>UI</code>设计，产品经理的沟通；</p></li><li><p>做好的页面结构，页面重构和用户体验；</p></li></ul><h3 id="4、你觉得前端工程的价值体现在哪"><a href="#4、你觉得前端工程的价值体现在哪" class="headerlink" title="4、你觉得前端工程的价值体现在哪"></a>4、你觉得前端工程的价值体现在哪</h3><ul><li><p>为简化用户使用提供技术支持（交互部分）</p></li><li><p>为多个浏览器兼容性提供支持</p></li><li><p>为提高用户浏览速度（浏览器性能）提供支持</p></li><li><p>为跨平台或者其他基于webkit或其他渲染引擎的应用提供支持</p></li><li><p>为展示数据提供支持（数据接口）</p></li></ul><h3 id="5、平时如何管理你的项目？"><a href="#5、平时如何管理你的项目？" class="headerlink" title="5、平时如何管理你的项目？"></a>5、平时如何管理你的项目？</h3><ul><li><p>先期团队必须确定好全局样式（<code>globe.css</code>），编码模式(<code>utf-8</code>) 等；</p></li><li><p>编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</p></li><li><p>标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</p></li><li><p>页面进行标注（例如 页面 模块 开始和结束）；</p></li><li><p><code>CSS</code>跟<code>HTML</code> 分文件夹并行存放，命名都得统一（例如<code>style.css</code>）；</p></li><li><p><code>JS</code> 分文件夹存放 命名以该<code>JS</code>功能为准的英文翻译。</p></li><li><p>图片采用整合的 <code>images.png png8</code> 格式文件使用 - 尽量整合在一起使用方便将来的管理</p></li></ul><h2 id="人事面-1"><a href="#人事面-1" class="headerlink" title="人事面"></a>人事面</h2><ul><li>面试完你还有什么问题要问的吗</li><li>你有什么爱好?</li><li>你最大的优点和缺点是什么?</li><li>你为什么会选择这个行业，职位?</li><li>你觉得你适合从事这个岗位吗?</li><li>你有什么职业规划?</li><li>你对工资有什么要求?</li><li>如何看待前端开发？</li><li>未来三到五年的规划是怎样的？</li></ul><h2 id="常问-1"><a href="#常问-1" class="headerlink" title="常问"></a>常问</h2><ul><li>自我介绍</li><li>你的项目中技术难点是什么？遇到了什么问题？你是怎么解决的？</li><li>你认为哪个项目做得最好？</li><li>最近在看哪些前端方面的书？</li><li>平时是如何学习前端开发的？</li><li>你最有成就感的一件事</li><li>你是怎么学习前端的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;h3 id=&quot;HTML，-HTTP，web综合问题&quot;&gt;&lt;a href=&quot;#HTML，-HTTP，web综合问题&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="面试" scheme="http://blog.poetries.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>IE6下常见的兼容性问题</title>
    <link href="http://blog.poetries.top/2017/02/07/ie-compatibility-summary/"/>
    <id>http://blog.poetries.top/2017/02/07/ie-compatibility-summary/</id>
    <published>2017-02-07T03:10:43.000Z</published>
    <updated>2017-09-17T12:12:07.719Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确"><a href="#常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确" class="headerlink" title="常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确"></a>常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确</h4><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">210px</span>;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">float</span>:left</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">float</span>:right;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">180px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">180px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">25px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/1-1.png" alt=""></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/1-2.png" alt=""></p><a id="more"></a><h4 id="常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动"><a href="#常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动" class="headerlink" title="常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动"></a>常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动</h4><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">float</span>:right;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h3</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/2-1.png" alt=""></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/2-2.png" alt=""></p><hr><h4 id="常见问题三：p里面不要套用p标签或者标题标签"><a href="#常见问题三：p里面不要套用p标签或者标题标签" class="headerlink" title="常见问题三：p里面不要套用p标签或者标题标签"></a>常见问题三：p里面不要套用p标签或者标题标签</h4><hr><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/3-1.png" alt=""></p><h4 id="常见问题四：IE6下最小高度问题"><a href="#常见问题四：IE6下最小高度问题" class="headerlink" title="常见问题四：IE6下最小高度问题"></a>常见问题四：IE6下最小高度问题</h4><hr><ul><li><p>当<code>height&lt;19px</code>的时候会被当作19px来处理</p></li><li><p>解决办法：<code>overflow:hidden</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    height:2px;</div><div class="line">    background:red;</div><div class="line">    overflow:hidden</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/4-1.png" alt=""></p><h4 id="常见问题五：border-1px-dotted-IE6不支持"><a href="#常见问题五：border-1px-dotted-IE6不支持" class="headerlink" title="常见问题五：border:1px dotted; IE6不支持"></a>常见问题五：<code>border:1px dotted</code>; <code>IE6</code>不支持</h4><hr><ul><li>解决办法：切背景平铺</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width:100px;</div><div class="line">    height:100px;</div><div class="line">    border:1px dotted red;</div><div class="line">    margin:100px auto;</div><div class="line">&#125;</div><div class="line">        </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/5-1.png" alt=""></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/5-2.png" alt=""></p><h4 id="常见问题六：IE6下，父元素用边框，子元素的margin会消失"><a href="#常见问题六：IE6下，父元素用边框，子元素的margin会消失" class="headerlink" title="常见问题六：IE6下，父元素用边框，子元素的margin会消失"></a>常见问题六：IE6下，父元素用边框，子元素的margin会消失</h4><hr><ul><li>解决办法：触发父元素的<code>haslayout</code>;</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</div><div class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;</div><div class="line">    <span class="comment">/*padding:1px;*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">100px</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p> <img src="http://7xq6al.com1.z0.glb.clouddn.com/6-1.png" alt=""></p><p> <img src="http://7xq6al.com1.z0.glb.clouddn.com/6-2.png" alt=""></p><h4 id="常见问题七：IE6双边距bug：横向的margin值会被放大为两倍"><a href="#常见问题七：IE6双边距bug：横向的margin值会被放大为两倍" class="headerlink" title="常见问题七：IE6双边距bug：横向的margin值会被放大为两倍"></a>常见问题七：<code>IE6</code>双边距<code>bug</code>：横向的<code>margin</code>值会被放大为两倍</h4><hr><ul><li>解决方法：<code>display:inline</code>;</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width:200px;</div><div class="line">    height:200px;</div><div class="line">    background:red;</div><div class="line">    float:left;</div><div class="line">    margin:100px;</div><div class="line">    display:inline;</div><div class="line">&#125;</div><div class="line">        </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/7-1.png" alt=""></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/7-2.png" alt=""></p><hr><h4 id="常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别-gt-3px的时候"><a href="#常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别-gt-3px的时候" class="headerlink" title="常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别&gt;3px的时候"></a>常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别<code>&gt;3px</code>的时候</h4><hr><ul><li>IE6双边距bug：横向的<code>margin</code>值会被放大为两倍</li><li>解决方法：<code>display:inline;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    float:left;</div><div class="line">    border:10px solid #000;</div><div class="line">    width:600px;</div><div class="line">&#125;</div><div class="line">.box div&#123;</div><div class="line">    width:100px;</div><div class="line">    height:100px;</div><div class="line">    background:red;</div><div class="line">    margin:20px;</div><div class="line">    border:5px solid blue;</div><div class="line">    float:left;</div><div class="line">    display:inline;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/8-1.png" alt=""></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/8-2.png" alt=""></p><h4 id="常见问题九：IE6，7下-li本身没有浮动，但是li里面的内容有浮动，每个li下边就会产生一个间距"><a href="#常见问题九：IE6，7下-li本身没有浮动，但是li里面的内容有浮动，每个li下边就会产生一个间距" class="headerlink" title="常见问题九：IE6，7下 li本身没有浮动，但是li里面的内容有浮动，每个li下边就会产生一个间距"></a>常见问题九：<code>IE6，7</code>下 <code>li</code>本身没有浮动，但是<code>li</code>里面的内容有浮动，每个<code>li</code>下边就会产生一个间距</h4><hr><ul><li>解决办法：<ul><li>1、给<code>li</code>添加 <code>vertical-align:top</code></li><li>2、给<code>li</code>添加浮动</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span>&#123;</div><div class="line">    <span class="attribute">width</span>:</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">list-style</span>:none;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">    /*vertical-align:top*/;float:left;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">float</span>:right;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/9-1.png" alt=""></p><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/9-2.png" alt=""></p><h4 id="常见问题十：IE6，7下面让两个块级元素在一行内显示-都用浮动"><a href="#常见问题十：IE6，7下面让两个块级元素在一行内显示-都用浮动" class="headerlink" title="常见问题十：IE6，7下面让两个块级元素在一行内显示 都用浮动"></a>常见问题十：IE6，7下面让两个块级元素在一行内显示 都用浮动</h4><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">float</span>:left;<span class="comment">/*margin-left:100px;*/</span></div><div class="line">&#125;</div><div class="line">```</div><div class="line"></div><div class="line"></div><div class="line">#### 常见问题十一：<span class="selector-tag">IE6</span>下的文字溢出</div><div class="line"><span class="selector-tag">---</span></div><div class="line"></div><div class="line">&gt; 子元素的宽度和父元素的宽度相差小于3<span class="selector-tag">px</span>的时候，两个浮动元素之间有注释或者行内元素的时候</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> 解决办法：用<span class="selector-tag">div</span>把注释和行内元素包裹起来</div><div class="line"></div><div class="line">```<span class="selector-tag">css</span></div><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">    <span class="attribute">float</span>:right</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="comment">&lt;!--IE6下的文字溢出--&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>@poetries<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失"><a href="#常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失" class="headerlink" title="常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失"></a>常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失</h4><hr><ul><li>解决办法：给定位元素外面包一个div</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">150px</span>; </div><div class="line">    <span class="attribute">height</span>:<span class="number">150px</span>;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">50px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">right</span>:-<span class="number">20px</span>;</div><div class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素"><a href="#常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素" class="headerlink" title="常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素"></a>常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素</h4><hr><ul><li>解决办法：给父元素也添加相对定位属性</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</div><div class="line">    <span class="attribute">overflow</span>:auto;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.con</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">150px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line">```</div><div class="line"></div><div class="line">```<span class="selector-tag">html</span></div><div class="line">&lt;div class="box"&gt;</div><div class="line">&lt;div class="con"&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差"><a href="#常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差" class="headerlink" title="常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差"></a>常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差</h4><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">201px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">201px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">20px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">20px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">right</span>:-<span class="number">1px</span>;<span class="attribute">bottom</span>:-<span class="number">1px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="常见问题十五：IE6不支持固定定位-css没办法解决"><a href="#常见问题十五：IE6不支持固定定位-css没办法解决" class="headerlink" title="常见问题十五：IE6不支持固定定位  css没办法解决"></a>常见问题十五：IE6不支持固定定位  css没办法解决</h4><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;<span class="comment">/*去除默认外边距、内边距*/</span></div><div class="line"></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">position</span>:fixed;</div><div class="line">    <span class="attribute">left</span>:<span class="number">50px</span>;</div><div class="line">    <span class="attribute">top</span>:<span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div class="box"&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="常见问题十六：IE6-7下，输入类型的表单控件上下各有1px间隙"><a href="#常见问题十六：IE6-7下，输入类型的表单控件上下各有1px间隙" class="headerlink" title="常见问题十六：IE6 7下，输入类型的表单控件上下各有1px间隙"></a>常见问题十六：IE6 7下，输入类型的表单控件上下各有1px间隙</h4><hr><ul><li>解决办法：给input加浮动</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">32px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;  </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">28px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="常见问题十七：IE6-7下，输入类型的表单控件加border-none没用"><a href="#常见问题十七：IE6-7下，输入类型的表单控件加border-none没用" class="headerlink" title="常见问题十七：IE6 7下，输入类型的表单控件加border:none没用"></a>常见问题十七：IE6 7下，输入类型的表单控件加border:none没用</h4><hr><ul><li>解决办法：<ul><li>1、border:0;</li><li>2、给input添加背景颜色</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">32px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;  </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">28px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">border</span>:none;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="常见问题十八："><a href="#常见问题十八：" class="headerlink" title="常见问题十八："></a>常见问题十八：</h4><hr><blockquote><ul><li>1、输入类型的表单控件添加背景图片url和no-repeat之间一定要有空格</li><li>2、输入文字时候，背景图片会跟着移动</li></ul></blockquote><ul><li>解决办法：2、给背景图片固定定位，但是在IE7下 背景图片显示会错误</li><li>最佳办法：把背景图添加给父元素</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">32px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red; </div><div class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(ball.png) no-repeat; </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">border</span>:none;</div><div class="line">    <span class="attribute">background</span>:none;</div><div class="line">    <span class="comment">/*background:#fff url(ball.png) no-repeat fixed;*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="常见问题十九：IE6不支持tbody"><a href="#常见问题十九：IE6不支持tbody" class="headerlink" title="常见问题十九：IE6不支持tbody"></a>常见问题十九：IE6不支持tbody</h4><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-tag">table</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">border-collapse</span>:collapse;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">tbody</span>&#123;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">tr</span>&#123;</div><div class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(ball.png) no-repeat;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">td</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&quot;&gt;&lt;a href=&quot;#常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&quot; class=&quot;headerlink&quot; title=&quot;常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&quot;&gt;&lt;/a&gt;常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;400px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.left&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;210px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:left&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.right&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;:hidden;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;180px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;180px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:blue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;25px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;right&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z0.glb.clouddn.com/1-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z0.glb.clouddn.com/1-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://blog.poetries.top/tags/CSS/"/>
    
      <category term="csshack" scheme="http://blog.poetries.top/tags/csshack/"/>
    
  </entry>
  
  <entry>
    <title>弹性布局总结</title>
    <link href="http://blog.poetries.top/2017/02/06/flex/"/>
    <id>http://blog.poetries.top/2017/02/06/flex/</id>
    <published>2017-02-06T11:20:43.000Z</published>
    <updated>2017-09-17T12:12:07.719Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>以下6个属性设置在容器上</strong><ul><li><code>flex-direction</code></li><li><code>flex-wrap</code></li><li><code>flex-flow</code></li><li><code>justify-content</code></li><li><code>align-items</code></li><li><code>align-content</code></li></ul></li><li><strong>属性详解</strong><ul><li><code>flex-direction: row</code> | <code>row-reverse</code> | <code>column</code> | <code>column-reverse</code>;</li><li><code>flex-wrap: nowrap</code> | <code>wrap</code> | <code>wrap-reverse</code>;</li><li><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code><ul><li><code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;</code>;</li></ul></li><li><code>justify-content</code>属性定义了项目在主轴上的对齐方式。<ul><li><code>justify-content: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code>;</li></ul></li><li><code>align-items</code>属性定义项目在交叉轴上如何对齐。<ul><li><code>align-items: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</li></ul></li><li><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<ul><li><code>align-content: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code> | <code>stretch</code>;</li></ul></li></ul></li></ul><hr><ul><li><p><strong>以下6个属性设置在项目上</strong></p><ul><li><code>order</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex-basis</code></li><li><code>flex</code></li><li><code>align-self</code></li></ul></li><li><p><strong>属性详解</strong></p><ul><li><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为<code>0</code></li><li><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</li><li><code>flex-shrink</code>属性定义了项目的缩小比例，默认为<code>1</code>，即如果空间不足，该项目将缩小。</li><li><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</li><li><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</li><li><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</li><li><code>align-self: auto</code> | <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</li></ul></li></ul><hr><ul><li><strong>图解flex布局</strong></li></ul><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/0001.jpg" alt="enter description here"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;以下6个属性设置在容器上&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-wrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-flow&lt;/code&gt;&lt;/
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="HTML5" scheme="http://blog.poetries.top/tags/HTML5/"/>
    
      <category term="弹性布局" scheme="http://blog.poetries.top/tags/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
</feed>
